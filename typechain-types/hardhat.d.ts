/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FlashLoanSimpleReceiverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanSimpleReceiverBase__factory>;
    getContractFactory(
      name: "IFlashLoanSimpleReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanSimpleReceiver__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "FlashLoanContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanContract__factory>;
    getContractFactory(
      name: "SwapContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapContract__factory>;
    getContractFactory(
      name: "UniSwapContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniSwapContract__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "UniswapV3Flash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Flash__factory>;
    getContractFactory(
      name: "ERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Token__factory>;
    getContractFactory(
      name: "MockFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFactory__factory>;
    getContractFactory(
      name: "Adminable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adminable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IYProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYProxy__factory>;
    getContractFactory(
      name: "YSpace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YSpace__factory>;
    getContractFactory(
      name: "IYAddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYAddressBook__factory>;
    getContractFactory(
      name: "YAddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YAddressBook__factory>;
    getContractFactory(
      name: "IYDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYDeployer__factory>;
    getContractFactory(
      name: "YDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YDeployer__factory>;
    getContractFactory(
      name: "IYEncoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYEncoder__factory>;
    getContractFactory(
      name: "YEncoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YEncoder__factory>;
    getContractFactory(
      name: "IYExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYExecutor__factory>;
    getContractFactory(
      name: "YExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YExecutor__factory>;
    getContractFactory(
      name: "IYProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYProxy__factory>;
    getContractFactory(
      name: "YProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YProxy__factory>;
    getContractFactory(
      name: "IYStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYStorage__factory>;
    getContractFactory(
      name: "YStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YStorage__factory>;
    getContractFactory(
      name: "YBaseVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YBaseVault__factory>;
    getContractFactory(
      name: "ContractFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractFactory__factory>;
    getContractFactory(
      name: "IYKitProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYKitProxy__factory>;
    getContractFactory(
      name: "YKitProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YKitProxy__factory>;
    getContractFactory(
      name: "DDSP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DDSP__factory>;
    getContractFactory(
      name: "DDSPCch",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DDSPCch__factory>;
    getContractFactory(
      name: "DDSPF",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DDSPF__factory>;
    getContractFactory(
      name: "DSAth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAth__factory>;
    getContractFactory(
      name: "DSAthEvnts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAthEvnts__factory>;
    getContractFactory(
      name: "DSAthrt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAthrt__factory>;
    getContractFactory(
      name: "DSNt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSNt__factory>;
    getContractFactory(
      name: "IDDSP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDDSP__factory>;
    getContractFactory(
      name: "AdvancedEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdvancedEscrow__factory>;
    getContractFactory(
      name: "AdvancedERC20Locker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdvancedERC20Locker__factory>;
    getContractFactory(
      name: "ERC20Locker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Locker__factory>;
    getContractFactory(
      name: "ETHLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHLocker__factory>;
    getContractFactory(
      name: "YOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YOperator__factory>;
    getContractFactory(
      name: "CustomPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomPausable__factory>;
    getContractFactory(
      name: "StakingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingContract__factory>;
    getContractFactory(
      name: "UniSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniSwapper__factory>;
    getContractFactory(
      name: "ERC20SwapVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20SwapVault__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IYeSwapperFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYeSwapperFactory__factory>;
    getContractFactory(
      name: "SwapContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapContract__factory>;
    getContractFactory(
      name: "YeSwapperFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YeSwapperFactory__factory>;
    getContractFactory(
      name: "ERC20WrappedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WrappedToken__factory>;
    getContractFactory(
      name: "TokenProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenProxy__factory>;
    getContractFactory(
      name: "WrappedTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedTokenFactory__factory>;
    getContractFactory(
      name: "SimpleVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleVault__factory>;
    getContractFactory(
      name: "OffChainMultiSigWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OffChainMultiSigWallet__factory>;
    getContractFactory(
      name: "OnChainMultiSigWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnChainMultiSigWallet__factory>;
    getContractFactory(
      name: "YKitFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YKitFactory__factory>;

    getContractAt(
      name: "FlashLoanSimpleReceiverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanSimpleReceiverBase>;
    getContractAt(
      name: "IFlashLoanSimpleReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanSimpleReceiver>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ECDSA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "FlashLoanContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanContract>;
    getContractAt(
      name: "SwapContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapContract>;
    getContractAt(
      name: "UniSwapContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniSwapContract>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "UniswapV3Flash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Flash>;
    getContractAt(
      name: "ERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Token>;
    getContractAt(
      name: "MockFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFactory>;
    getContractAt(
      name: "Adminable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Adminable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IYProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYProxy>;
    getContractAt(
      name: "YSpace",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YSpace>;
    getContractAt(
      name: "IYAddressBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYAddressBook>;
    getContractAt(
      name: "YAddressBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YAddressBook>;
    getContractAt(
      name: "IYDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYDeployer>;
    getContractAt(
      name: "YDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YDeployer>;
    getContractAt(
      name: "IYEncoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYEncoder>;
    getContractAt(
      name: "YEncoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YEncoder>;
    getContractAt(
      name: "IYExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYExecutor>;
    getContractAt(
      name: "YExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YExecutor>;
    getContractAt(
      name: "IYProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYProxy>;
    getContractAt(
      name: "YProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YProxy>;
    getContractAt(
      name: "IYStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYStorage>;
    getContractAt(
      name: "YStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YStorage>;
    getContractAt(
      name: "YBaseVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YBaseVault>;
    getContractAt(
      name: "ContractFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractFactory>;
    getContractAt(
      name: "IYKitProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYKitProxy>;
    getContractAt(
      name: "YKitProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YKitProxy>;
    getContractAt(
      name: "DDSP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DDSP>;
    getContractAt(
      name: "DDSPCch",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DDSPCch>;
    getContractAt(
      name: "DDSPF",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DDSPF>;
    getContractAt(
      name: "DSAth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAth>;
    getContractAt(
      name: "DSAthEvnts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAthEvnts>;
    getContractAt(
      name: "DSAthrt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAthrt>;
    getContractAt(
      name: "DSNt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSNt>;
    getContractAt(
      name: "IDDSP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDDSP>;
    getContractAt(
      name: "AdvancedEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdvancedEscrow>;
    getContractAt(
      name: "AdvancedERC20Locker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdvancedERC20Locker>;
    getContractAt(
      name: "ERC20Locker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Locker>;
    getContractAt(
      name: "ETHLocker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHLocker>;
    getContractAt(
      name: "YOperator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YOperator>;
    getContractAt(
      name: "CustomPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomPausable>;
    getContractAt(
      name: "StakingContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingContract>;
    getContractAt(
      name: "UniSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniSwapper>;
    getContractAt(
      name: "ERC20SwapVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20SwapVault>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IYeSwapperFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYeSwapperFactory>;
    getContractAt(
      name: "SwapContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapContract>;
    getContractAt(
      name: "YeSwapperFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YeSwapperFactory>;
    getContractAt(
      name: "ERC20WrappedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WrappedToken>;
    getContractAt(
      name: "TokenProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenProxy>;
    getContractAt(
      name: "WrappedTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedTokenFactory>;
    getContractAt(
      name: "SimpleVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleVault>;
    getContractAt(
      name: "OffChainMultiSigWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OffChainMultiSigWallet>;
    getContractAt(
      name: "OnChainMultiSigWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnChainMultiSigWallet>;
    getContractAt(
      name: "YKitFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YKitFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
