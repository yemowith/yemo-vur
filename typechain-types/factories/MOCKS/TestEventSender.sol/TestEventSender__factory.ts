/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestEventSender,
  TestEventSenderInterface,
} from "../../../MOCKS/TestEventSender.sol/TestEventSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_eventEmitterAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "eventEmitter",
    outputs: [
      {
        internalType: "contract IEventEmitter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "sub",
        type: "string",
      },
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "sendTestEvent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161031b38038061031b83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610288806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639ff78c301461003b578063e214015414610085575b600080fd5b60005461005b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61009861009336600461018b565b6100a8565b604051901515815260200161007c565b600080546040517fcbf6b6fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063cbf6b6fe90610105908890889088908890600401610220565b600060405180830381600087803b15801561011f57600080fd5b505af1158015610133573d6000803e3d6000fd5b50600198975050505050505050565b60008083601f84011261015457600080fd5b50813567ffffffffffffffff81111561016c57600080fd5b60208301915083602082850101111561018457600080fd5b9250929050565b600080600080604085870312156101a157600080fd5b843567ffffffffffffffff808211156101b957600080fd5b6101c588838901610142565b909650945060208701359150808211156101de57600080fd5b506101eb87828801610142565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006102346040830186886101f7565b82810360208401526102478185876101f7565b97965050505050505056fea2646970667358221220d0118b0137f36754a4401182d8e55661c0874308d0ead5b7ba0a6e81d17c1aef64736f6c63430008140033";

type TestEventSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestEventSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestEventSender__factory extends ContractFactory {
  constructor(...args: TestEventSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _eventEmitterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestEventSender> {
    return super.deploy(
      _eventEmitterAddress,
      overrides || {}
    ) as Promise<TestEventSender>;
  }
  override getDeployTransaction(
    _eventEmitterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_eventEmitterAddress, overrides || {});
  }
  override attach(address: string): TestEventSender {
    return super.attach(address) as TestEventSender;
  }
  override connect(signer: Signer): TestEventSender__factory {
    return super.connect(signer) as TestEventSender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestEventSenderInterface {
    return new utils.Interface(_abi) as TestEventSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestEventSender {
    return new Contract(address, _abi, signerOrProvider) as TestEventSender;
  }
}
