/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DPLR,
  DPLRInterface,
} from "../../../../YemoVur/Ykit/DPLR.sol/DPLR";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_s",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_b",
        type: "bytes",
      },
    ],
    name: "dpl",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gLdpld",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
    ],
    name: "ga",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gldpldPy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ldpld",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ldpldPy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_a",
        type: "address",
      },
      {
        internalType: "string",
        name: "_p",
        type: "string",
      },
    ],
    name: "mpy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061083f806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b49f2e291161005b578063b49f2e2914610146578063c38b943a14610159578063cc8d7b261461016c578063d86401de1461017d57600080fd5b80633729cb931461008257806345f547b41461012057806392359ffe14610133575b600080fd5b61010461009036600461036f565b8051602091820120604080517fff00000000000000000000000000000000000000000000000000000000000000818501523060601b6bffffffffffffffffffffffff191660218201526035810194909452605580850192909252805180850390920182526075909301909252815191012090565b6040516001600160a01b03909116815260200160405180910390f35b61010461012e3660046103ca565b61018e565b600054610104906001600160a01b031681565b61010461015436600461036f565b610262565b600154610104906001600160a01b031681565b6000546001600160a01b0316610104565b6001546001600160a01b0316610104565b600080826040516020016101a29190610434565b6040516020818303038152906040528051906020012060001c90506000604051806020016101cf906102bd565b601f1982820381018352601f9091011660408181526001600160a01b03881660208301520160408051601f19818403018152908290526102129291602001610450565b604051602081830303815290604052905061022d8282610275565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216918217905595945050505050565b600061026e8383610275565b9392505050565b6000808383516020850134f59050803b61028e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790559392505050565b61038a8061048083390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff80841115610314576103146102ca565b604051601f8501601f19908116603f0116810190828211818310171561033c5761033c6102ca565b8160405280935085815286868601111561035557600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561038257600080fd5b82359150602083013567ffffffffffffffff8111156103a057600080fd5b8301601f810185136103b157600080fd5b6103c0858235602084016102f9565b9150509250929050565b600080604083850312156103dd57600080fd5b82356001600160a01b03811681146103f457600080fd5b9150602083013567ffffffffffffffff8111156103a057600080fd5b60005b8381101561042b578181015183820152602001610413565b50506000910152565b60008251610446818460208701610410565b9190910192915050565b60008351610462818460208801610410565b835190830190610476818360208801610410565b0194935050505056fe608060405234801561001057600080fd5b5060405161038a38038061038a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6102f7806100936000396000f3fe6080604052600436106100435760003560e01c80633a936b90146100ce578063569b6fd2146101035780638da5cb5b1461013b578063a19f5bad1461015b5761004a565b3661004a57005b6001546001600160a01b0316806100a85760405162461bcd60e51b815260206004820152601060248201527f696d706c74206e6f74207365747465640000000000000000000000000000000060448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100c7573d6000f35b3d6000fd5b005b3480156100da57600080fd5b506100ee6100e9366004610291565b61017b565b60405190151581526020015b60405180910390f35b34801561010f57600080fd5b50600154610123906001600160a01b031681565b6040516001600160a01b0390911681526020016100fa565b34801561014757600080fd5b50600054610123906001600160a01b031681565b34801561016757600080fd5b506100cc610176366004610291565b610208565b600080546001600160a01b031633146101d65760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161009f565b50600080546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b6000546001600160a01b031633146102625760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161009f565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000602082840312156102a357600080fd5b81356001600160a01b03811681146102ba57600080fd5b939250505056fea2646970667358221220076f30ba222b09648b5b2a7742151e6baf16f9e8f0dbff7186e43a40c543dd9864736f6c63430008140033a264697066735822122095fbc29453ef743b22bad48e4e3836afe0c6669bc873b6df867cbc387faafe0d64736f6c63430008140033";

type DPLRConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DPLRConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DPLR__factory extends ContractFactory {
  constructor(...args: DPLRConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DPLR> {
    return super.deploy(overrides || {}) as Promise<DPLR>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DPLR {
    return super.attach(address) as DPLR;
  }
  override connect(signer: Signer): DPLR__factory {
    return super.connect(signer) as DPLR__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DPLRInterface {
    return new utils.Interface(_abi) as DPLRInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DPLR {
    return new Contract(address, _abi, signerOrProvider) as DPLR;
  }
}
