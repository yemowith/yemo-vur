/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestModuleSessionManager,
  TestModuleSessionManagerInterface,
} from "../../../../contracts/Tests/wallet/TestModuleSessionManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "SessionEnded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "SessionStarted",
    type: "event",
  },
  {
    inputs: [],
    name: "endSession",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sessionExpiry",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sessionUser",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "startSession",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636ca0f814116100505780636ca0f814146100b357806377127612146100d3578063e237a3fc146100e857600080fd5b806312b226c91461006c57806355b667e314610088575b600080fd5b61007560015481565b6040519081526020015b60405180910390f35b60005461009b906001600160a01b031681565b6040516001600160a01b03909116815260200161007f565b6100c66100c1366004610367565b6100f0565b60405161007f91906103f8565b6100e66100e1366004610446565b61025d565b005b6100e66102c1565b6000546060906001600160a01b031633146101525760405162461bcd60e51b815260206004820152601060248201527f4e6f742073657373696f6e20757365720000000000000000000000000000000060448201526064015b60405180910390fd5b60015442106101a35760405162461bcd60e51b815260206004820152600f60248201527f53657373696f6e206578706972656400000000000000000000000000000000006044820152606401610149565b600080856001600160a01b031685856040516101c092919061045f565b6000604051808303816000865af19150503d80600081146101fd576040519150601f19603f3d011682016040523d82523d6000602084013e610202565b606091505b5091509150816102545760405162461bcd60e51b815260206004820152601260248201527f5472616e73616374696f6e206661696c656400000000000000000000000000006044820152606401610149565b95945050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff191633179055610286814261046f565b60015560405181815233907f6479f44bef3ce31847397612fb476f7f382288003bdebea81c5302f8bd819dd19060200160405180910390a250565b6000546001600160a01b0316331461031b5760405162461bcd60e51b815260206004820152601060248201527f4e6f742073657373696f6e2075736572000000000000000000000000000000006044820152606401610149565b6000805473ffffffffffffffffffffffffffffffffffffffff19168155600181905560405133917f49fa048463c11173dbc8b2ab8d09ebe6c38c168737d5a622b65b8086a01cbd0691a2565b60008060006040848603121561037c57600080fd5b83356001600160a01b038116811461039357600080fd5b9250602084013567ffffffffffffffff808211156103b057600080fd5b818601915086601f8301126103c457600080fd5b8135818111156103d357600080fd5b8760208285010111156103e557600080fd5b6020830194508093505050509250925092565b600060208083528351808285015260005b8181101561042557858101830151858201604001528201610409565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561045857600080fd5b5035919050565b8183823760009101908152919050565b808201808211156104a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212208b35f3012a0f05d0ac59ed72cffdfc3eb765d6a76defd3c3aa5e6671025747e964736f6c63430008140033";

type TestModuleSessionManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestModuleSessionManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestModuleSessionManager__factory extends ContractFactory {
  constructor(...args: TestModuleSessionManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestModuleSessionManager> {
    return super.deploy(overrides || {}) as Promise<TestModuleSessionManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestModuleSessionManager {
    return super.attach(address) as TestModuleSessionManager;
  }
  override connect(signer: Signer): TestModuleSessionManager__factory {
    return super.connect(signer) as TestModuleSessionManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestModuleSessionManagerInterface {
    return new utils.Interface(_abi) as TestModuleSessionManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestModuleSessionManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestModuleSessionManager;
  }
}
