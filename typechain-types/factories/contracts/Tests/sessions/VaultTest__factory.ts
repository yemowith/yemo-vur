/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  VaultTest,
  VaultTestInterface,
} from "../../../../contracts/Tests/sessions/VaultTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_mainAsset",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mainAsset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105f53803806105f583398101604081905261002f9161005d565b600180546001600160a01b039092166001600160a01b0319928316179055600280549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b6105598061009c6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638da5cb5b116100505780638da5cb5b146100b4578063b6b55f25146100df578063b7224f84146100f257600080fd5b806327e235e31461006c5780632e1a7d4d1461009f575b600080fd5b61008c61007a366004610444565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b6100b26100ad366004610474565b610105565b005b6002546100c7906001600160a01b031681565b6040516001600160a01b039091168152602001610096565b6100b26100ed366004610474565b61033d565b6001546100c7906001600160a01b031681565b336000908152602081905260409020548111156101695760405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e636500000000000000000000000060448201526064015b60405180910390fd5b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee919061048d565b101561023c5760405162461bcd60e51b815260206004820181905260248201527f436f6e74726163742062616c616e636520697320696e73756666696369656e746044820152606401610160565b336000908152602081905260408120805483929061025b9084906104d5565b90915550506001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156102ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ee91906104ee565b61033a5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610160565b50565b6001546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d191906104ee565b61041d5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610160565b336000908152602081905260408120805483929061043c908490610510565b909155505050565b60006020828403121561045657600080fd5b81356001600160a01b038116811461046d57600080fd5b9392505050565b60006020828403121561048657600080fd5b5035919050565b60006020828403121561049f57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156104e8576104e86104a6565b92915050565b60006020828403121561050057600080fd5b8151801515811461046d57600080fd5b808201808211156104e8576104e86104a656fea2646970667358221220e9faa357ce82093b10b8ecdc5feb2fb662080bb415e1317ff00e88920c606cd164736f6c63430008140033";

type VaultTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultTest__factory extends ContractFactory {
  constructor(...args: VaultTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mainAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VaultTest> {
    return super.deploy(_mainAsset, overrides || {}) as Promise<VaultTest>;
  }
  override getDeployTransaction(
    _mainAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_mainAsset, overrides || {});
  }
  override attach(address: string): VaultTest {
    return super.attach(address) as VaultTest;
  }
  override connect(signer: Signer): VaultTest__factory {
    return super.connect(signer) as VaultTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultTestInterface {
    return new utils.Interface(_abi) as VaultTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultTest {
    return new Contract(address, _abi, signerOrProvider) as VaultTest;
  }
}
