/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestContract,
  TestContractInterface,
} from "../../../../contracts/Tests/sessions/TestContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_sessionManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user1",
        type: "address",
      },
      {
        internalType: "address",
        name: "user2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sessionDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "depositAmount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawAmount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "depositAmount2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawAmount2",
        type: "uint256",
      },
    ],
    name: "runTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161061138038061061183398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610553806100be6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063afc83dd714610030575b600080fd5b61004361003e366004610460565b610045565b005b600054604051633b893b0960e11b8152600481018790526001600160a01b0390911690637712761290602401600060405180830381600087803b15801561008b57600080fd5b505af115801561009f573d6000803e3d6000fd5b505060408051602480820189905282518083039091018152604490910182526020810180516001600160e01b031663b6b55f2560e01b1790526000546001549251631b283e0560e21b81529194506001600160a01b039081169350636ca0f814926101119291169085906004016104be565b600060405180830381600087803b15801561012b57600080fd5b505af115801561013f573d6000803e3d6000fd5b505060408051602480820189905282518083039091018152604490910182526020810180516001600160e01b0316632e1a7d4d60e01b1790526000546001549251631b283e0560e21b81529194506001600160a01b039081169350636ca0f814926101b19291169085906004016104be565b600060405180830381600087803b1580156101cb57600080fd5b505af11580156101df573d6000803e3d6000fd5b5050600080546040805163388de8ff60e21b815290516001600160a01b03909216945063e237a3fc9350600480820193929182900301818387803b15801561022657600080fd5b505af115801561023a573d6000803e3d6000fd5b5050600054604051633b893b0960e11b8152600481018b90526001600160a01b03909116925063771276129150602401600060405180830381600087803b15801561028457600080fd5b505af1158015610298573d6000803e3d6000fd5b505060408051602480820189905282518083039091018152604490910182526020810180516001600160e01b031663b6b55f2560e01b1790526000546001549251631b283e0560e21b81529194506001600160a01b039081169350636ca0f8149261030a9291169085906004016104be565b600060405180830381600087803b15801561032457600080fd5b505af1158015610338573d6000803e3d6000fd5b505060408051602480820189905282518083039091018152604490910182526020810180516001600160e01b0316632e1a7d4d60e01b1790526000546001549251631b283e0560e21b81529194506001600160a01b039081169350636ca0f814926103aa9291169085906004016104be565b600060405180830381600087803b1580156103c457600080fd5b505af11580156103d8573d6000803e3d6000fd5b5050600080546040805163388de8ff60e21b815290516001600160a01b03909216945063e237a3fc9350600480820193929182900301818387803b15801561041f57600080fd5b505af1158015610433573d6000803e3d6000fd5b505050505050505050505050505050565b80356001600160a01b038116811461045b57600080fd5b919050565b600080600080600080600060e0888a03121561047b57600080fd5b61048488610444565b965061049260208901610444565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b6001600160a01b038316815260006020604081840152835180604085015260005b818110156104fb578581018301518582016060015282016104df565b506000606082860101526060601f19601f83011685010192505050939250505056fea26469706673582212208665c61697c6f70aac7be0fab146e0dfcb82dffd7ccd15636a3231c4f3764fae64736f6c63430008140033";

type TestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestContract__factory extends ContractFactory {
  constructor(...args: TestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _sessionManager: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestContract> {
    return super.deploy(
      _sessionManager,
      _vault,
      overrides || {}
    ) as Promise<TestContract>;
  }
  override getDeployTransaction(
    _sessionManager: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_sessionManager, _vault, overrides || {});
  }
  override attach(address: string): TestContract {
    return super.attach(address) as TestContract;
  }
  override connect(signer: Signer): TestContract__factory {
    return super.connect(signer) as TestContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestContractInterface {
    return new utils.Interface(_abi) as TestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestContract {
    return new Contract(address, _abi, signerOrProvider) as TestContract;
  }
}
