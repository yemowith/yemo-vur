/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  YExecutor,
  YExecutorInterface,
} from "../../../../../contracts/Space/YTools/YExecutor.sol/YExecutor";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "call",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "callStatic",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "string",
        name: "signature",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "getEncodedData",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "signature",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "getEncodedData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multiExecute",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319338181169190921617179055610d63806100396000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634a3aad111161005b5780634a3aad11146100fc5780637eaeabff1461011d5780638da5cb5b14610130578063a6f9dae11461015b57600080fd5b80631a8090bb1461008d5780631b8b921d146100b65780631cff79cd146100d657806344eb6463146100e9575b600080fd5b6100a061009b366004610a00565b610170565b6040516100ad9190610b10565b60405180910390f35b6100c96100c4366004610b72565b6102f5565b6040516100ad9190610bb6565b6100c96100e4366004610b72565b610409565b6100c96100f7366004610b72565b610477565b61010f61010a366004610bc9565b610581565b6040516100ad929190610c3d565b6100c961012b366004610c5f565b610617565b600054610143906001600160a01b031681565b6040516001600160a01b0390911681526020016100ad565b61016e610169366004610cb9565b6106a5565b005b6000546060906001600160a01b031633146101d25760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064015b60405180910390fd5b81518351146102235760405162461bcd60e51b815260206004820181905260248201527f5461726765747320616e642064617461206c656e677468206d69736d6174636860448201526064016101c9565b6000835167ffffffffffffffff81111561023f5761023f610879565b60405190808252806020026020018201604052801561027257816020015b606081526020019060019003908161025d5790505b50905060005b84518110156102ed576102bd85828151811061029657610296610cd4565b60200260200101518583815181106102b0576102b0610cd4565b60200260200101516107c8565b8282815181106102cf576102cf610cd4565b602002602001018190525080806102e590610cea565b915050610278565b509392505050565b6000546060906001600160a01b031633146103525760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016101c9565b600080846001600160a01b03168460405161036d9190610d11565b6000604051808303816000865af19150503d80600081146103aa576040519150601f19603f3d011682016040523d82523d6000602084013e6103af565b606091505b5091509150816104015760405162461bcd60e51b815260206004820152600b60248201527f43616c6c206661696c656400000000000000000000000000000000000000000060448201526064016101c9565b949350505050565b6000546060906001600160a01b031633146104665760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016101c9565b61047083836107c8565b9392505050565b6000546060906001600160a01b031633146104d45760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016101c9565b600080846001600160a01b0316846040516104ef9190610d11565b600060405180830381855afa9150503d806000811461052a576040519150601f19603f3d011682016040523d82523d6000602084013e61052f565b606091505b5091509150816104015760405162461bcd60e51b815260206004820152601260248201527f5374617469632063616c6c206661696c6564000000000000000000000000000060448201526064016101c9565b600060608484846040516024016105989190610bb6565b60408051601f1981840301815290829052916105b391610d11565b6040519081900390206020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009092169190911790529092509050935093915050565b6060828260405160240161062b9190610bb6565b60408051601f19818403018152908290529161064691610d11565b6040519081900390206020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909216919091179052905092915050565b6000546001600160a01b031633146106ff5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016101c9565b6001600160a01b0381166107555760405162461bcd60e51b815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f206164647265737300000060448201526064016101c9565b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516107e59190610d11565b6000604051808303816000865af19150503d8060008114610822576040519150601f19603f3d011682016040523d82523d6000602084013e610827565b606091505b5091509150816104015760405162461bcd60e51b815260206004820152601060248201527f457865637574696f6e206661696c65640000000000000000000000000000000060448201526064016101c9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108b8576108b8610879565b604052919050565b600067ffffffffffffffff8211156108da576108da610879565b5060051b60200190565b80356001600160a01b03811681146108fb57600080fd5b919050565b600082601f83011261091157600080fd5b813567ffffffffffffffff81111561092b5761092b610879565b61093e601f8201601f191660200161088f565b81815284602083860101111561095357600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261098157600080fd5b81356020610996610991836108c0565b61088f565b82815260059290921b840181019181810190868411156109b557600080fd5b8286015b848110156109f557803567ffffffffffffffff8111156109d95760008081fd5b6109e78986838b0101610900565b8452509183019183016109b9565b509695505050505050565b60008060408385031215610a1357600080fd5b823567ffffffffffffffff80821115610a2b57600080fd5b818501915085601f830112610a3f57600080fd5b81356020610a4f610991836108c0565b82815260059290921b84018101918181019089841115610a6e57600080fd5b948201945b83861015610a9357610a84866108e4565b82529482019490820190610a73565b96505086013592505080821115610aa957600080fd5b50610ab685828601610970565b9150509250929050565b60005b83811015610adb578181015183820152602001610ac3565b50506000910152565b60008151808452610afc816020860160208601610ac0565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b6557603f19888603018452610b53858351610ae4565b94509285019290850190600101610b37565b5092979650505050505050565b60008060408385031215610b8557600080fd5b610b8e836108e4565b9150602083013567ffffffffffffffff811115610baa57600080fd5b610ab685828601610900565b6020815260006104706020830184610ae4565b600080600060608486031215610bde57600080fd5b610be7846108e4565b9250602084013567ffffffffffffffff80821115610c0457600080fd5b610c1087838801610900565b93506040860135915080821115610c2657600080fd5b50610c3386828701610900565b9150509250925092565b6001600160a01b03831681526040602082015260006104016040830184610ae4565b60008060408385031215610c7257600080fd5b823567ffffffffffffffff80821115610c8a57600080fd5b610c9686838701610900565b93506020850135915080821115610cac57600080fd5b50610ab685828601610900565b600060208284031215610ccb57600080fd5b610470826108e4565b634e487b7160e01b600052603260045260246000fd5b600060018201610d0a57634e487b7160e01b600052601160045260246000fd5b5060010190565b60008251610d23818460208701610ac0565b919091019291505056fea2646970667358221220de3ea43c8656335715223295af181eb5b42a44e63eb96e31cfb8bd61e86353c064736f6c63430008140033";

type YExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YExecutor__factory extends ContractFactory {
  constructor(...args: YExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YExecutor> {
    return super.deploy(overrides || {}) as Promise<YExecutor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): YExecutor {
    return super.attach(address) as YExecutor;
  }
  override connect(signer: Signer): YExecutor__factory {
    return super.connect(signer) as YExecutor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YExecutorInterface {
    return new utils.Interface(_abi) as YExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YExecutor {
    return new Contract(address, _abi, signerOrProvider) as YExecutor;
  }
}
