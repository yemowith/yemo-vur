/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Adminable,
  AdminableInterface,
} from "../../../../contracts/Space/Helper/Adminable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldSuperAdmin",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newSuperAdmin",
        type: "address",
      },
    ],
    name: "SuperAdminChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newSuperAdmin",
        type: "address",
      },
    ],
    name: "changeSuperAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "superAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060008054336001600160a01b0319918216811783556001805490921617905561037d90819061004090396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806329575f6a1461005157806341858c4b146100805780638da5cb5b14610095578063a6f9dae1146100a8575b600080fd5b600154610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61009361008e366004610317565b6100bb565b005b600054610064906001600160a01b031681565b6100936100b6366004610317565b6101ff565b6001546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520737570657241646d696e0000000060448201526064015b60405180910390fd5b6001600160a01b0381166101965760405162461bcd60e51b815260206004820152602560248201527f4e657720737570657241646d696e20616464726573732063616e6e6f7420626560448201527f206e756c6c0000000000000000000000000000000000000000000000000000006064820152608401610111565b6001546040516001600160a01b038084169216907f6a7fb6694616d75391385b86c21a1cc2628072753f9c7da9731e7b1b083a55e490600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102595760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e65720000000000000000006044820152606401610111565b6001600160a01b0381166102af5760405162461bcd60e51b815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152606401610111565b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006020828403121561032957600080fd5b81356001600160a01b038116811461034057600080fd5b939250505056fea2646970667358221220c71f6e2bbaa5ca5b5e5542ba7e9d3dc45285f1c1b5d737ab04446311065fff9a64736f6c63430008140033";

type AdminableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AdminableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Adminable__factory extends ContractFactory {
  constructor(...args: AdminableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Adminable> {
    return super.deploy(overrides || {}) as Promise<Adminable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Adminable {
    return super.attach(address) as Adminable;
  }
  override connect(signer: Signer): Adminable__factory {
    return super.connect(signer) as Adminable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdminableInterface {
    return new utils.Interface(_abi) as AdminableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Adminable {
    return new Contract(address, _abi, signerOrProvider) as Adminable;
  }
}
