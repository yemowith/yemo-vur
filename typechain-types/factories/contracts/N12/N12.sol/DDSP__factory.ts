/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DDSP,
  DDSPInterface,
} from "../../../../contracts/N12/N12.sol/DDSP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_cacheAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "cache",
    outputs: [
      {
        internalType: "contract DDSPCch",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_code",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_cacheAddr",
        type: "address",
      },
    ],
    name: "setCch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnrship",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161080938038061080983398101604081905261002f916100d1565b600080546001600160a01b0319163317905561004a81610051565b5050610101565b60006001600160a01b0382166100ad5760405162461bcd60e51b815260206004820152601f60248201527f64732d70726f78792d63616368652d616464726573732d726571756972656400604482015260640160405180910390fd5b50600180546001600160a01b0319166001600160a01b039290921691909117815590565b6000602082840312156100e357600080fd5b81516001600160a01b03811681146100fa57600080fd5b9392505050565b6106f9806101106000396000f3fe6080604052600436106100635760003560e01c80631f6a1eb9116100405780631f6a1eb9146100f957806360c7d2951461011a5780637b8cb8b71461013a57005b8063140df25d1461006c5780631b8cf2a3146100a15780631cff79cd146100d957005b3661006a57005b005b34801561007857600080fd5b5061008c610087366004610499565b61015a565b60405190151581526020015b60405180910390f35b3480156100ad57600080fd5b506000546100c1906001600160a01b031681565b6040516001600160a01b039091168152602001610098565b6100ec6100e7366004610579565b6101e8565b604051610098919061060f565b61010c610107366004610622565b61028b565b60405161009892919061067c565b34801561012657600080fd5b506001546100c1906001600160a01b031681565b34801561014657600080fd5b5061006a610155366004610499565b6103d2565b60006001600160a01b0382166101b75760405162461bcd60e51b815260206004820152601f60248201527f64732d70726f78792d63616368652d616464726573732d72657175697265640060448201526064015b60405180910390fd5b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117815590565b60606001600160a01b0383166102405760405162461bcd60e51b815260206004820181905260248201527f64732d70726f78792d7461726765742d616464726573732d726571756972656460448201526064016101ae565b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103610282578160208501fd5b50505092915050565b6001546040517f8bf4515c0000000000000000000000000000000000000000000000000000000081526000916060916001600160a01b0390911690638bf4515c906102da90879060040161060f565b602060405180830381865afa1580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b91906106a6565b91506001600160a01b0382166103ba576001546040517f7ed0c3b20000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690637ed0c3b29061037490879060040161060f565b6020604051808303816000875af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b791906106a6565b91505b60006103c683856101e8565b92959294509192505050565b6000546001600160a01b031633146104525760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084016101ae565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038116811461049657600080fd5b50565b6000602082840312156104ab57600080fd5b81356104b681610481565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126104fd57600080fd5b813567ffffffffffffffff80821115610518576105186104bd565b604051601f8301601f19908116603f01168101908282118183101715610540576105406104bd565b8160405283815286602085880101111561055957600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561058c57600080fd5b823561059781610481565b9150602083013567ffffffffffffffff8111156105b357600080fd5b6105bf858286016104ec565b9150509250929050565b6000815180845260005b818110156105ef576020818501810151868301820152016105d3565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006104b660208301846105c9565b6000806040838503121561063557600080fd5b823567ffffffffffffffff8082111561064d57600080fd5b610659868387016104ec565b9350602085013591508082111561066f57600080fd5b506105bf858286016104ec565b6001600160a01b038316815260406020820152600061069e60408301846105c9565b949350505050565b6000602082840312156106b857600080fd5b81516104b68161048156fea264697066735822122028af9e343e68008ad143779e5bf441b47ac48f0b9bf1a4e2afce89ec4194ffc964736f6c63430008140033";

type DDSPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DDSPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DDSP__factory extends ContractFactory {
  constructor(...args: DDSPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _cacheAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DDSP> {
    return super.deploy(_cacheAddr, overrides || {}) as Promise<DDSP>;
  }
  override getDeployTransaction(
    _cacheAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_cacheAddr, overrides || {});
  }
  override attach(address: string): DDSP {
    return super.attach(address) as DDSP;
  }
  override connect(signer: Signer): DDSP__factory {
    return super.connect(signer) as DDSP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DDSPInterface {
    return new utils.Interface(_abi) as DDSPInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DDSP {
    return new Contract(address, _abi, signerOrProvider) as DDSP;
  }
}
