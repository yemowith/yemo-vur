/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Swapper,
  SwapperInterface,
} from "../../../../contracts/Ykit/Swapper/Swapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_exchangeRate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Swapped",
    type: "event",
  },
  {
    inputs: [],
    name: "exchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_exchangeRate",
        type: "uint256",
      },
    ],
    name: "setExchangeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapBaseToQuote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapQuoteToBase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract ERC20Vault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e44380380610e4483398101604081905261002f9161017f565b338061005657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61005f8161012f565b506001600160a01b0382166100b65760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964207661756c7420616464726573730000000000000000000000604482015260640161004d565b600081116101065760405162461bcd60e51b815260206004820152601560248201527f496e76616c69642065786368616e676520726174650000000000000000000000604482015260640161004d565b600180546001600160a01b0319166001600160a01b0393909316929092179091556002556101b9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561019257600080fd5b82516001600160a01b03811681146101a957600080fd5b6020939093015192949293505050565b610c7c806101c86000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d551d1301161005b578063d551d130146100eb578063db068e0e146100fe578063f2fde38b14610111578063fbfa77cf1461012457600080fd5b80633ba0b9a91461008d578063715018a6146100a95780638da5cb5b146100b357806390690fdf146100d8575b600080fd5b61009660025481565b6040519081526020015b60405180910390f35b6100b1610137565b005b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100a0565b6100b16100e6366004610b71565b61014b565b6100b16100f9366004610b71565b6105ea565b6100b161010c366004610b71565b610a0f565b6100b161011f366004610b9f565b610a6c565b6001546100c0906001600160a01b031681565b61013f610ac3565b6101496000610b09565b565b600081116101a05760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b6001546040805163c55dae6360e01b8152905183926001600160a01b03169163c35082a991839163c55dae639160048083019260209291908290030181865afa1580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102159190610bc3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604401602060405180830381865afa15801561025f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102839190610be0565b10156102d15760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e742062616c616e636520696e207661756c740000006044820152606401610197565b6000670de0b6b3a7640000600254836102ea9190610bf9565b6102f49190610c24565b6001546040805163c55dae6360e01b815290519293506001600160a01b039091169163f3fef3a391839163c55dae63916004808201926020929091908290030181865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610bc3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b1580156103b557600080fd5b505af11580156103c9573d6000803e3d6000fd5b505060015460408051630217a4b760e41b815290516001600160a01b0390921693506347e7ef249250839163217a4b70916004808201926020929091908290030181865afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104439190610bc3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b50505050600160009054906101000a90046001600160a01b03166001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190610bc3565b6001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190610bc3565b6001600160a01b0316336001600160a01b03167f5a417e3ceaff68360f7300df6686a9d417ae12328724de7bc2fd6c012a2ffa85856040516105de91815260200190565b60405180910390a45050565b6000811161063a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610197565b60015460408051630217a4b760e41b8152905183926001600160a01b03169163c35082a991839163217a4b709160048083019260209291908290030181865afa15801561068b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106af9190610bc3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604401602060405180830381865afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190610be0565b101561076b5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e742062616c616e636520696e207661756c740000006044820152606401610197565b60025460009061078383670de0b6b3a7640000610bf9565b61078d9190610c24565b60015460408051630217a4b760e41b815290519293506001600160a01b039091169163f3fef3a391839163217a4b70916004808201926020929091908290030181865afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190610bc3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b15801561084e57600080fd5b505af1158015610862573d6000803e3d6000fd5b50506001546040805163c55dae6360e01b815290516001600160a01b0390921693506347e7ef249250839163c55dae63916004808201926020929091908290030181865afa1580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc9190610bc3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b50505050600160009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190610bc3565b6001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610576573d6000803e3d6000fd5b610a17610ac3565b60008111610a675760405162461bcd60e51b815260206004820152601560248201527f496e76616c69642065786368616e6765207261746500000000000000000000006044820152606401610197565b600255565b610a74610ac3565b6001600160a01b038116610ab7576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610197565b610ac081610b09565b50565b6000546001600160a01b03163314610149576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610197565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610b8357600080fd5b5035919050565b6001600160a01b0381168114610ac057600080fd5b600060208284031215610bb157600080fd5b8135610bbc81610b8a565b9392505050565b600060208284031215610bd557600080fd5b8151610bbc81610b8a565b600060208284031215610bf257600080fd5b5051919050565b8082028115828204841417610c1e57634e487b7160e01b600052601160045260246000fd5b92915050565b600082610c4157634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220949f644cdbd63c73d496b96f994c2e0e0320e61ae3d06db5dc90e829b2718f2e64736f6c63430008140033";

type SwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swapper__factory extends ContractFactory {
  constructor(...args: SwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vault: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Swapper> {
    return super.deploy(
      _vault,
      _exchangeRate,
      overrides || {}
    ) as Promise<Swapper>;
  }
  override getDeployTransaction(
    _vault: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, _exchangeRate, overrides || {});
  }
  override attach(address: string): Swapper {
    return super.attach(address) as Swapper;
  }
  override connect(signer: Signer): Swapper__factory {
    return super.connect(signer) as Swapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new utils.Interface(_abi) as SwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Swapper {
    return new Contract(address, _abi, signerOrProvider) as Swapper;
  }
}
