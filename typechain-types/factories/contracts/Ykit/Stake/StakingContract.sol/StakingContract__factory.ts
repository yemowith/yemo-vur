/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  StakingContract,
  StakingContractInterface,
} from "../../../../../contracts/Ykit/Stake/StakingContract.sol/StakingContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dailyRewardRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_weeklyRewardRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_monthlyRewardRate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum StakingContract.StakingPeriod",
        name: "period",
        type: "uint8",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dailyRewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "monthlyRewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dailyRewardRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_weeklyRewardRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_monthlyRewardRate",
        type: "uint256",
      },
    ],
    name: "setRewardRates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum StakingContract.StakingPeriod",
        name: "period",
        type: "uint8",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "enum StakingContract.StakingPeriod",
        name: "period",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "staked",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weeklyRewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161123338038061123383398101604081905261002f91610157565b338061005657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61005f81610107565b506000805460ff60a01b19169055600180546001600160a01b031916331790556001600160a01b0384166100d55760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e20616464726573730000000000000000000000604482015260640161004d565b600280546001600160a01b0319166001600160a01b0395909516949094179093556003919091556004556005556101a2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806080858703121561016d57600080fd5b84516001600160a01b038116811461018457600080fd5b60208601516040870151606090970151919890975090945092505050565b611082806101b16000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806372f702f3116100b2578063c1e3d2dd11610081578063d82e396211610066578063d82e396214610259578063eaa1b9f31461026c578063f2fde38b1461027557600080fd5b8063c1e3d2dd14610248578063c7b8981c1461025157600080fd5b806372f702f3146101f15780637a2105b71461021c5780638456cb591461022f5780638da5cb5b1461023757600080fd5b80633e29caeb116100ee5780633e29caeb146101bb5780633f4ba83a146101c45780635c975abb146101cc578063715018a6146101e957600080fd5b80630700037d1461012057806310087fb11461015357806316934fc4146101685780632def6620146101b3575b600080fd5b61014061012e366004610e8e565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b610166610161366004610ebe565b610288565b005b6101a3610176366004610e8e565b60066020526000908152604090208054600182015460029092015490919060ff8082169161010090041684565b60405161014a9493929190610f2a565b61016661062d565b61014060055481565b61016661088a565b600054600160a01b900460ff16604051901515815260200161014a565b610166610927565b600254610204906001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b61016661022a366004610f56565b61093b565b610166610951565b6000546001600160a01b0316610204565b61014060035481565b6101666109ee565b610140610267366004610e8e565b610ba4565b61014060045481565b610166610283366004610e8e565b610cb3565b600054600160a01b900460ff16156102da5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b6000821161032a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016102d1565b33600090815260066020526040902060020154610100900460ff16156103925760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479207374616b656400000000000000000000000000000000000060448201526064016102d1565b6002546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201526000916001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610f82565b9050828110156104705760405162461bcd60e51b815260206004820152601960248201527f436865636b2074686520746f6b656e20616c6c6f77616e63650000000000000060448201526064016102d1565b6002546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610f9b565b6105505760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c6564000000000000000000000060448201526064016102d1565b604051806080016040528084815260200142815260200183600281111561057957610579610ef2565b81526001602091820181905233600090815260068352604090819020845181559284015183830155830151600280840180549293909260ff19169184908111156105c5576105c5610ef2565b021790555060609190910151600290910180549115156101000261ff001990921691909117905560405133907f8acf475137e0cd74ca7f611d16b1e6383ec9a9c71a8e5b85967781b9c7214d11906106209086908690610fbd565b60405180910390a2505050565b600054600160a01b900460ff161561067a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102d1565b3360009081526006602052604090206002810154610100900460ff166106e25760405162461bcd60e51b815260206004820152600f60248201527f4e6f20616374697665207374616b65000000000000000000000000000000000060448201526064016102d1565b60028101546106f39060ff16610d0a565b81600101546107029190610fe7565b4210156107515760405162461bcd60e51b815260206004820152601c60248201527f5374616b696e6720706572696f64206e6f742079657420656e6465640000000060448201526064016102d1565b8054600080835560028301805461ff001916905561076e33610ba4565b33600090815260076020526040812080549293508392909190610792908490610fe7565b909155505060025460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190610f9b565b6108585760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c6564000000000000000000000060448201526064016102d1565b60405182815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001610620565b6001546001600160a01b031633146108e45760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573657200000000000000000000000060448201526064016102d1565b6000805460ff60a01b191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b61092f610d7c565b6109396000610dc2565b565b610943610d7c565b600392909255600455600555565b6001546001600160a01b031633146109ab5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573657200000000000000000000000060448201526064016102d1565b6000805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589060200161091d565b600054600160a01b900460ff1615610a3b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102d1565b3360009081526007602052604090205480610a985760405162461bcd60e51b815260206004820152601460248201527f4e6f207265776172647320617661696c61626c6500000000000000000000000060448201526064016102d1565b3360008181526007602052604080822091909155600254905163a9059cbb60e01b81526004810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b209190610f9b565b610b6c5760405162461bcd60e51b815260206004820152601660248201527f526577617264207472616e73666572206661696c65640000000000000000000060448201526064016102d1565b60405181815233907f8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e5031619060200160405180910390a250565b6001600160a01b038116600090815260066020908152604080832081516080810183528154815260018201549381019390935260028082015485949384019160ff90911690811115610bf857610bf8610ef2565b6002811115610c0957610c09610ef2565b815260029190910154610100900460ff1615156020909101526060810151909150610c375750600092915050565b6000610c468260400151610d0a565b90506000826020015142610c5a9190611000565b905081811015610c6f57506000949350505050565b6000610c7e8460400151610e2a565b905060008383838760000151610c949190611013565b610c9e9190611013565b610ca8919061102a565b979650505050505050565b610cbb610d7c565b6001600160a01b038116610cfe576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016102d1565b610d0781610dc2565b50565b600080826002811115610d1f57610d1f610ef2565b03610d2e575062015180919050565b6001826002811115610d4257610d42610ef2565b03610d51575062093a80919050565b6002826002811115610d6557610d65610ef2565b03610d74575062278d00919050565b506000919050565b6000546001600160a01b03163314610939576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016102d1565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826002811115610e3f57610e3f610ef2565b03610e4c57505060035490565b6001826002811115610e6057610e60610ef2565b03610e6d57505060045490565b6002826002811115610e8157610e81610ef2565b03610d7457505060055490565b600060208284031215610ea057600080fd5b81356001600160a01b0381168114610eb757600080fd5b9392505050565b60008060408385031215610ed157600080fd5b82359150602083013560038110610ee757600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60038110610f2657634e487b7160e01b600052602160045260246000fd5b9052565b8481526020810184905260808101610f456040830185610f08565b821515606083015295945050505050565b600080600060608486031215610f6b57600080fd5b505081359360208301359350604090920135919050565b600060208284031215610f9457600080fd5b5051919050565b600060208284031215610fad57600080fd5b81518015158114610eb757600080fd5b82815260408101610eb76020830184610f08565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ffa57610ffa610fd1565b92915050565b81810381811115610ffa57610ffa610fd1565b8082028115828204841417610ffa57610ffa610fd1565b60008261104757634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122063e201384ed4b96490971bebdefe39b99b75a675da15f4fb412acc36c7d188e864736f6c63430008140033";

type StakingContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingContract__factory extends ContractFactory {
  constructor(...args: StakingContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stakingToken: PromiseOrValue<string>,
    _dailyRewardRate: PromiseOrValue<BigNumberish>,
    _weeklyRewardRate: PromiseOrValue<BigNumberish>,
    _monthlyRewardRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakingContract> {
    return super.deploy(
      _stakingToken,
      _dailyRewardRate,
      _weeklyRewardRate,
      _monthlyRewardRate,
      overrides || {}
    ) as Promise<StakingContract>;
  }
  override getDeployTransaction(
    _stakingToken: PromiseOrValue<string>,
    _dailyRewardRate: PromiseOrValue<BigNumberish>,
    _weeklyRewardRate: PromiseOrValue<BigNumberish>,
    _monthlyRewardRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _dailyRewardRate,
      _weeklyRewardRate,
      _monthlyRewardRate,
      overrides || {}
    );
  }
  override attach(address: string): StakingContract {
    return super.attach(address) as StakingContract;
  }
  override connect(signer: Signer): StakingContract__factory {
    return super.connect(signer) as StakingContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingContractInterface {
    return new utils.Interface(_abi) as StakingContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingContract {
    return new Contract(address, _abi, signerOrProvider) as StakingContract;
  }
}
