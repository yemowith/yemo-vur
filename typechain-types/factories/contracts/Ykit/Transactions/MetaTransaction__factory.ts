/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MetaTransaction,
  MetaTransactionInterface,
} from "../../../../contracts/Ykit/Transactions/MetaTransaction";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address payable",
        name: "relayerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
    ],
    name: "MetaTransactionExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "sigR",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigS",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "sigV",
        type: "uint8",
      },
    ],
    name: "executeMetaTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "toEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "metaTxHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigR",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigS",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "sigV",
        type: "uint8",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061071c806100206000396000f3fe60806040526004361061003f5760003560e01c8063081678f8146100445780630c53c51c146100795780637ecebe0014610099578063918a15cf146100d4575b600080fd5b34801561005057600080fd5b5061006461005f366004610451565b610142565b60405190151581526020015b60405180910390f35b61008c6100873660046104b7565b610214565b60405161007091906105e1565b3480156100a557600080fd5b506100c66100b43660046105fb565b60006020819052908152604090205481565b604051908152602001610070565b3480156100e057600080fd5b506100c66100ef366004610616565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000600161019d866040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6040805160008152602081018083529290925260ff851690820152606081018690526080810185905260a0016020604051602081039080840390855afa1580156101eb573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b6001600160a01b03851660009081526020818152604080832054905160609392610243929130918a910161062f565b6040516020818303038152906040528051906020012090506102688782878787610142565b6102df5760405162461bcd60e51b815260206004820152602e60248201527f4d6574615472616e73616374696f6e3a207369676e617475726520766572696660448201527f69636174696f6e206661696c656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b03871660009081526020819052604081208054916103038361066e565b9190505550600080306001600160a01b0316886040516103239190610695565b6000604051808303816000865af19150503d8060008114610360576040519150601f19603f3d011682016040523d82523d6000602084013e610365565b606091505b5091509150816103dd5760405162461bcd60e51b815260206004820152602d60248201527f4d6574615472616e73616374696f6e3a2066756e6374696f6e2063616c6c206e60448201527f6f74207375636365737366756c0000000000000000000000000000000000000060648201526084016102d6565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b89338a604051610410939291906106b1565b60405180910390a198975050505050505050565b80356001600160a01b038116811461043b57600080fd5b919050565b803560ff8116811461043b57600080fd5b600080600080600060a0868803121561046957600080fd5b61047286610424565b945060208601359350604086013592506060860135915061049560808701610440565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156104cf57600080fd5b6104d886610424565b9450602086013567ffffffffffffffff808211156104f557600080fd5b818801915088601f83011261050957600080fd5b81358181111561051b5761051b6104a1565b604051601f8201601f19908116603f01168101908382118183101715610543576105436104a1565b816040528281528b602084870101111561055c57600080fd5b826020860160208301376000602084830101528098505050505050604086013592506060860135915061049560808701610440565b60005b838110156105ac578181015183820152602001610594565b50506000910152565b600081518084526105cd816020860160208601610591565b601f01601f19169290920160200192915050565b6020815260006105f460208301846105b5565b9392505050565b60006020828403121561060d57600080fd5b6105f482610424565b60006020828403121561062857600080fd5b5035919050565b8381526bffffffffffffffffffffffff198360601b1660208201526000825161065f816034850160208701610591565b91909101603401949350505050565b60006001820161068e57634e487b7160e01b600052601160045260246000fd5b5060010190565b600082516106a7818460208701610591565b9190910192915050565b60006001600160a01b038086168352808516602084015250606060408301526106dd60608301846105b5565b9594505050505056fea2646970667358221220d8db714e784ad9e3fd26978f169b35498f0f51494237ae0f3010744af800538264736f6c63430008140033";

type MetaTransactionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaTransactionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaTransaction__factory extends ContractFactory {
  constructor(...args: MetaTransactionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MetaTransaction> {
    return super.deploy(overrides || {}) as Promise<MetaTransaction>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaTransaction {
    return super.attach(address) as MetaTransaction;
  }
  override connect(signer: Signer): MetaTransaction__factory {
    return super.connect(signer) as MetaTransaction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaTransactionInterface {
    return new utils.Interface(_abi) as MetaTransactionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaTransaction {
    return new Contract(address, _abi, signerOrProvider) as MetaTransaction;
  }
}
