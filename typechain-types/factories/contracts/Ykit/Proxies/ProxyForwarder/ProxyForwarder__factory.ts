/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ProxyForwarder,
  ProxyForwarderInterface,
} from "../../../../../contracts/Ykit/Proxies/ProxyForwarder/ProxyForwarder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "forward",
    outputs: [
      {
        internalType: "bytes",
        name: "_result",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610351806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b13ba5de1461003b578063e43252d714610064575b600080fd5b61004e610049366004610187565b6100a5565b60405161005b919061029b565b60405180910390f35b6100a36100723660046102e9565b73ffffffffffffffffffffffffffffffffffffffff166000908152602081905260409020805460ff19166001179055565b005b606060008573ffffffffffffffffffffffffffffffffffffffff1685856040516100d092919061030b565b6000604051808303816000865af19150503d806000811461010d576040519150601f19603f3d011682016040523d82523d6000602084013e610112565b606091505b509250905080610126573d6000803e3d6000fd5b50949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461015357600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806060858703121561019d57600080fd5b6101a68561012f565b935060208086013567ffffffffffffffff808211156101c457600080fd5b818801915088601f8301126101d857600080fd5b8135818111156101e757600080fd5b89848285010111156101f857600080fd5b91830195509093506040870135908082111561021357600080fd5b818801915088601f83011261022757600080fd5b81358181111561023957610239610158565b604051601f8201601f19908116603f0116810190838211818310171561026157610261610158565b816040528281528b8684870101111561027957600080fd5b8286860187830137600086848301015280965050505050505092959194509250565b600060208083528351808285015260005b818110156102c8578581018301518582016040015282016102ac565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156102fb57600080fd5b6103048261012f565b9392505050565b818382376000910190815291905056fea264697066735822122009bff15bc12173b59419db6f9aa4228a3c00476aec03b937ff217187eba90b5264736f6c63430008140033";

type ProxyForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProxyForwarder__factory extends ContractFactory {
  constructor(...args: ProxyForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProxyForwarder> {
    return super.deploy(overrides || {}) as Promise<ProxyForwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProxyForwarder {
    return super.attach(address) as ProxyForwarder;
  }
  override connect(signer: Signer): ProxyForwarder__factory {
    return super.connect(signer) as ProxyForwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyForwarderInterface {
    return new utils.Interface(_abi) as ProxyForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyForwarder {
    return new Contract(address, _abi, signerOrProvider) as ProxyForwarder;
  }
}
