/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  DDSPF,
  DDSPFInterface,
} from "../../../../../contracts/Ykit/DDSProxy/DDSPF.sol/DDSPF";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "cache",
        type: "address",
      },
    ],
    name: "Created",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "build",
    outputs: [
      {
        internalType: "address payable",
        name: "proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cache",
    outputs: [
      {
        internalType: "contract DDSPCch",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getProxy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isProxy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "proxies",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b039290921691909117905561006c565b61025f806111ed83390190565b6111728061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063b7fba4d311610050578063b7fba4d3146100cf578063c4552791146100e2578063f3701da21461010b57600080fd5b8063297103881461006c57806360c7d295146100a4575b600080fd5b61008f61007a36600461034f565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6002546100b7906001600160a01b031681565b6040516001600160a01b03909116815260200161009b565b6100b76100dd36600461034f565b61011e565b6100b76100f036600461034f565b6001602052600090815260409020546001600160a01b031681565b6100b761011936600461034f565b6101d3565b6001600160a01b0380821660009081526001602090815260408083205490931682528190529081205460ff166101b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f78792065786973747320666f722074686973206f776e65720000604482015260640160405180910390fd5b506001600160a01b039081166000908152600160205260409020541690565b6002546040516000916001600160a01b0316906101ef90610342565b6001600160a01b039091168152602001604051809103906000f08015801561021b573d6000803e3d6000fd5b50600254604080516001600160a01b03808516825292831660208201529293509084169133917f259b30ca39885c6d801a0b5dbc988640f3c25e2f37531fe138c5c5af8955d41b910160405180910390a36040517f13af40350000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301528216906313af403590602401600060405180830381600087803b1580156102c857600080fd5b505af11580156102dc573d6000803e3d6000fd5b5050506001600160a01b03808316600081815260208181526040808320805460ff1916600190811790915597909416825295909552932080547fffffffffffffffffffffffff000000000000000000000000000000000000000016909317909255919050565b610dbd8061038083390190565b60006020828403121561036157600080fd5b81356001600160a01b038116811461037857600080fd5b939250505056fe60806040523480156200001157600080fd5b5060405162000dbd38038062000dbd83398101604081905262000034916200028d565b600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26200007d8162000085565b505062000319565b60006200009e336001600160e01b0319833516620001a7565b620000f05760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600435602435346001600160a01b0385166200014f5760405162461bcd60e51b815260206004820152601f60248201527f64732d70726f78792d63616368652d616464726573732d7265717569726564006044820152606401620000e7565b600280546001600160a01b0387166001600160a01b031990911617905560405160019450829084903390600080356001600160e01b03191691620001979187913690620002bf565b60405180910390a4505050919050565b6000306001600160a01b03841603620001c35750600162000287565b6001546001600160a01b0390811690841603620001e35750600162000287565b6000546001600160a01b0316620001fd5750600062000287565b60005460405163b700961360e01b81526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b700961390606401602060405180830381865afa1580156200025e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002849190620002f5565b90505b92915050565b600060208284031215620002a057600080fd5b81516001600160a01b0381168114620002b857600080fd5b9392505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000602082840312156200030857600080fd5b81518015158114620002b857600080fd5b610a9480620003296000396000f3fe6080604052600436106100795760003560e01c806360c7d2951161004b57806360c7d295146101185780637a9e5e4b146101505780638da5cb5b14610170578063bf7e214f1461019057005b806313af403514610082578063140df25d146100a25780631cff79cd146100d75780631f6a1eb9146100f757005b3661008057005b005b34801561008e57600080fd5b5061008061009d3660046107dc565b6101b0565b3480156100ae57600080fd5b506100c26100bd3660046107dc565b610265565b60405190151581526020015b60405180910390f35b6100ea6100e53660046108bc565b610380565b6040516100ce9190610952565b61010a610105366004610965565b6104d9565b6040516100ce9291906109bf565b34801561012457600080fd5b50600254610138906001600160a01b031681565b6040516001600160a01b0390911681526020016100ce565b34801561015c57600080fd5b5061008061016b3660046107dc565b610620565b34801561017c57600080fd5b50600154610138906001600160a01b031681565b34801561019c57600080fd5b50600054610138906001600160a01b031681565b6101c6336000356001600160e01b0319166106ce565b61020e5760405162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b60448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b600061027d336000356001600160e01b0319166106ce565b6102c05760405162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b6044820152606401610205565b600435602435346001600160a01b03851661031d5760405162461bcd60e51b815260206004820152601f60248201527f64732d70726f78792d63616368652d616464726573732d7265717569726564006044820152606401610205565b600280546001600160a01b03871673ffffffffffffffffffffffffffffffffffffffff1990911617905560405160019450829084903390600080356001600160e01b0319169161037091879136906109e9565b60405180910390a4505050919050565b6060610398336000356001600160e01b0319166106ce565b6103db5760405162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b6044820152606401610205565b600435602435346001600160a01b0386166104385760405162461bcd60e51b815260206004820181905260248201527f64732d70726f78792d7461726765742d616464726573732d72657175697265646044820152606401610205565b600080865160208801896113885a03f43d6040519550601f19601f6020830101168601604052808652806000602088013e81156001810361047a578160208801fd5b5050508183336001600160a01b03166000356001600160e01b0319167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916846000366040516104c8939291906109e9565b60405180910390a450505092915050565b6002546040517f8bf4515c0000000000000000000000000000000000000000000000000000000081526000916060916001600160a01b0390911690638bf4515c90610528908790600401610952565b602060405180830381865afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105699190610a1f565b91506001600160a01b038216610608576002546040517f7ed0c3b20000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690637ed0c3b2906105c2908790600401610952565b6020604051808303816000875af11580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106059190610a1f565b91505b60006106148385610380565b92959294509192505050565b610636336000356001600160e01b0319166106ce565b6106795760405162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b6044820152606401610205565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b6000306001600160a01b038416036106e8575060016107be565b6001546001600160a01b0390811690841603610706575060016107be565b6000546001600160a01b031661071e575060006107be565b6000546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b700961390606401602060405180830381865afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb9190610a3c565b90505b92915050565b6001600160a01b03811681146107d957600080fd5b50565b6000602082840312156107ee57600080fd5b81356107f9816107c4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261084057600080fd5b813567ffffffffffffffff8082111561085b5761085b610800565b604051601f8301601f19908116603f0116810190828211818310171561088357610883610800565b8160405283815286602085880101111561089c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156108cf57600080fd5b82356108da816107c4565b9150602083013567ffffffffffffffff8111156108f657600080fd5b6109028582860161082f565b9150509250929050565b6000815180845260005b8181101561093257602081850181015186830182015201610916565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006107f9602083018461090c565b6000806040838503121561097857600080fd5b823567ffffffffffffffff8082111561099057600080fd5b61099c8683870161082f565b935060208501359150808211156109b257600080fd5b506109028582860161082f565b6001600160a01b03831681526040602082015260006109e1604083018461090c565b949350505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610a3157600080fd5b81516107f9816107c4565b600060208284031215610a4e57600080fd5b815180151581146107f957600080fdfea2646970667358221220f8a9db1fbe8a3ae087e4a01eb7d41a54f88abe11cde4f9c7d42af38d2228d39064736f6c63430008140033a2646970667358221220923353cee0bbb1dbcbd466c1e6ccc54a1adf7844780ae0012856def281b7413964736f6c63430008140033608060405234801561001057600080fd5b5061023f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637ed0c3b21461003b5780638bf4515c14610077575b600080fd5b61004e610049366004610158565b6100b4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004e610085366004610158565b8051602091820120600090815290819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60008151602083016000f09050803b15600181036100d157600080fd5b508151602092830120600090815291829052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561016a57600080fd5b813567ffffffffffffffff8082111561018257600080fd5b818401915084601f83011261019657600080fd5b8135818111156101a8576101a8610129565b604051601f8201601f19908116603f011681019083821181831017156101d0576101d0610129565b816040528281528760208487010111156101e957600080fd5b82602086016020830137600092810160200192909252509594505050505056fea2646970667358221220646e9750720c91a2e3ce5e29d20f97c5035adf669ca5a9bb3f4eddc75e305c5264736f6c63430008140033";

type DDSPFConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DDSPFConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DDSPF__factory extends ContractFactory {
  constructor(...args: DDSPFConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DDSPF> {
    return super.deploy(overrides || {}) as Promise<DDSPF>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DDSPF {
    return super.attach(address) as DDSPF;
  }
  override connect(signer: Signer): DDSPF__factory {
    return super.connect(signer) as DDSPF__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DDSPFInterface {
    return new utils.Interface(_abi) as DDSPFInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DDSPF {
    return new Contract(address, _abi, signerOrProvider) as DDSPF;
  }
}
