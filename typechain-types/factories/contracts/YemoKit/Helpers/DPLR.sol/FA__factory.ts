/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  FA,
  FAInterface,
} from "../../../../../contracts/YemoKit/Helpers/DPLR.sol/FA";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610234806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806327e6daba1461003b57806361ff715f146100e6575b600080fd5b6100bd610049366004610143565b8051602091820120604080517fff00000000000000000000000000000000000000000000000000000000000000818501523060601b6bffffffffffffffffffffffff191660218201526035810194909452605580850192909252805180850390920182526075909301909252815191012090565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100bd6100f4366004610143565b6000808383516020850134f59050803b61010d57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561015657600080fd5b82359150602083013567ffffffffffffffff8082111561017557600080fd5b818501915085601f83011261018957600080fd5b81358181111561019b5761019b610114565b604051601f8201601f19908116603f011681019083821181831017156101c3576101c3610114565b816040528281528860208487010111156101dc57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea264697066735822122065448ad862f670c5716b138780af2ddfe380142b30d68ee88c007b0bd738c2b064736f6c63430008140033";

type FAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FA__factory extends ContractFactory {
  constructor(...args: FAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FA> {
    return super.deploy(overrides || {}) as Promise<FA>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FA {
    return super.attach(address) as FA;
  }
  override connect(signer: Signer): FA__factory {
    return super.connect(signer) as FA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FAInterface {
    return new utils.Interface(_abi) as FAInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FA {
    return new Contract(address, _abi, signerOrProvider) as FA;
  }
}
