/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace INSTA {
  export type AccountStruct = {
    accnrAdrs: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    code: PromiseOrValue<string>;
    accountVersion: PromiseOrValue<BigNumberish>;
  };

  export type AccountStructOutput = [string, string, string, BigNumber] & {
    accnrAdrs: string;
    owner: string;
    code: string;
    accountVersion: BigNumber;
  };
}

export interface INSTAInterface extends utils.Interface {
  functions: {
    "AppFc()": FunctionFragment;
    "AppFcA()": FunctionFragment;
    "accounts(string)": FunctionFragment;
    "appOwner()": FunctionFragment;
    "cast(address)": FunctionFragment;
    "defaultAccountCode()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getAccount(string)": FunctionFragment;
    "getAccount()": FunctionFragment;
    "mkaccnt(string)": FunctionFragment;
    "nacct(address,string,uint256)": FunctionFragment;
    "transTAccnt(string,address,uint256)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AppFc"
      | "AppFcA"
      | "accounts"
      | "appOwner"
      | "cast"
      | "defaultAccountCode"
      | "deposit"
      | "getAccount(string)"
      | "getAccount()"
      | "mkaccnt"
      | "nacct"
      | "transTAccnt"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AppFc", values?: undefined): string;
  encodeFunctionData(functionFragment: "AppFcA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "appOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cast",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAccountCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mkaccnt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nacct",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transTAccnt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "AppFc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "AppFcA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultAccountCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccount(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mkaccnt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nacct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transTAccnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface INSTA extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INSTAInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AppFc(overrides?: CallOverrides): Promise<[string]>;

    AppFcA(overrides?: CallOverrides): Promise<[string]>;

    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        accnrAdrs: string;
        owner: string;
        code: string;
        accountVersion: BigNumber;
      }
    >;

    appOwner(overrides?: CallOverrides): Promise<[string]>;

    cast(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultAccountCode(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getAccount(string)"(
      _code: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[INSTA.AccountStructOutput]>;

    "getAccount()"(
      overrides?: CallOverrides
    ): Promise<[INSTA.AccountStructOutput]>;

    mkaccnt(
      _code: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nacct(
      _owner: PromiseOrValue<string>,
      _code: PromiseOrValue<string>,
      _accountVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transTAccnt(
      _accnt: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AppFc(overrides?: CallOverrides): Promise<string>;

  AppFcA(overrides?: CallOverrides): Promise<string>;

  accounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      accnrAdrs: string;
      owner: string;
      code: string;
      accountVersion: BigNumber;
    }
  >;

  appOwner(overrides?: CallOverrides): Promise<string>;

  cast(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultAccountCode(overrides?: CallOverrides): Promise<string>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getAccount(string)"(
    _code: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<INSTA.AccountStructOutput>;

  "getAccount()"(overrides?: CallOverrides): Promise<INSTA.AccountStructOutput>;

  mkaccnt(
    _code: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nacct(
    _owner: PromiseOrValue<string>,
    _code: PromiseOrValue<string>,
    _accountVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transTAccnt(
    _accnt: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AppFc(overrides?: CallOverrides): Promise<string>;

    AppFcA(overrides?: CallOverrides): Promise<string>;

    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        accnrAdrs: string;
        owner: string;
        code: string;
        accountVersion: BigNumber;
      }
    >;

    appOwner(overrides?: CallOverrides): Promise<string>;

    cast(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultAccountCode(overrides?: CallOverrides): Promise<string>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "getAccount(string)"(
      _code: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<INSTA.AccountStructOutput>;

    "getAccount()"(
      overrides?: CallOverrides
    ): Promise<INSTA.AccountStructOutput>;

    mkaccnt(
      _code: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<INSTA.AccountStructOutput>;

    nacct(
      _owner: PromiseOrValue<string>,
      _code: PromiseOrValue<string>,
      _accountVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<INSTA.AccountStructOutput>;

    transTAccnt(
      _accnt: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    AppFc(overrides?: CallOverrides): Promise<BigNumber>;

    AppFcA(overrides?: CallOverrides): Promise<BigNumber>;

    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appOwner(overrides?: CallOverrides): Promise<BigNumber>;

    cast(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultAccountCode(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getAccount(string)"(
      _code: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mkaccnt(
      _code: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nacct(
      _owner: PromiseOrValue<string>,
      _code: PromiseOrValue<string>,
      _accountVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transTAccnt(
      _accnt: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AppFc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AppFcA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cast(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultAccountCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getAccount(string)"(
      _code: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mkaccnt(
      _code: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nacct(
      _owner: PromiseOrValue<string>,
      _code: PromiseOrValue<string>,
      _accountVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transTAccnt(
      _accnt: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
