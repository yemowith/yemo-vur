/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface N12Interface extends utils.Interface {
  functions: {
    "accountManager()": FunctionFragment;
    "erc20Locker()": FunctionFragment;
    "ethLocker()": FunctionFragment;
    "factory()": FunctionFragment;
    "init()": FunctionFragment;
    "initialized()": FunctionFragment;
    "sessionManager()": FunctionFragment;
    "wallet()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountManager"
      | "erc20Locker"
      | "ethLocker"
      | "factory"
      | "init"
      | "initialized"
      | "sessionManager"
      | "wallet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Locker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ethLocker", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Locker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;

  events: {};
}

export interface N12 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: N12Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountManager(overrides?: CallOverrides): Promise<[string]>;

    erc20Locker(overrides?: CallOverrides): Promise<[string]>;

    ethLocker(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    sessionManager(overrides?: CallOverrides): Promise<[string]>;

    wallet(overrides?: CallOverrides): Promise<[string]>;
  };

  accountManager(overrides?: CallOverrides): Promise<string>;

  erc20Locker(overrides?: CallOverrides): Promise<string>;

  ethLocker(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  sessionManager(overrides?: CallOverrides): Promise<string>;

  wallet(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountManager(overrides?: CallOverrides): Promise<string>;

    erc20Locker(overrides?: CallOverrides): Promise<string>;

    ethLocker(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    init(overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    sessionManager(overrides?: CallOverrides): Promise<string>;

    wallet(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    accountManager(overrides?: CallOverrides): Promise<BigNumber>;

    erc20Locker(overrides?: CallOverrides): Promise<BigNumber>;

    ethLocker(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    sessionManager(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20Locker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sessionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
