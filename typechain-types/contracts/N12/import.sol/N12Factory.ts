/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace N12Factory {
  export type UniSwapperInfoStruct = {
    router: PromiseOrValue<string>;
    factory: PromiseOrValue<string>;
    inToken: PromiseOrValue<string>;
    outToken: PromiseOrValue<string>;
    swapperAddress: PromiseOrValue<string>;
  };

  export type UniSwapperInfoStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    router: string;
    factory: string;
    inToken: string;
    outToken: string;
    swapperAddress: string;
  };
}

export interface N12FactoryInterface extends utils.Interface {
  functions: {
    "generateERC20Locker(address)": FunctionFragment;
    "generateMultiN12Vlt(address,uint256)": FunctionFragment;
    "generateN12Vlt(address)": FunctionFragment;
    "generateOffChainMultiSigWallet(uint256,address[])": FunctionFragment;
    "generateSingleN12Wlt()": FunctionFragment;
    "generateUniSwapper(address,address,address,address)": FunctionFragment;
    "getUniSwapperByInToken(address,address)": FunctionFragment;
    "getUserUniSwappers(address)": FunctionFragment;
    "getUserVaults(address)": FunctionFragment;
    "userLockers(address,uint256)": FunctionFragment;
    "userUniSwappers(address,uint256)": FunctionFragment;
    "userVaults(address,uint256)": FunctionFragment;
    "userWallets(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "generateERC20Locker"
      | "generateMultiN12Vlt"
      | "generateN12Vlt"
      | "generateOffChainMultiSigWallet"
      | "generateSingleN12Wlt"
      | "generateUniSwapper"
      | "getUniSwapperByInToken"
      | "getUserUniSwappers"
      | "getUserVaults"
      | "userLockers"
      | "userUniSwappers"
      | "userVaults"
      | "userWallets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "generateERC20Locker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateMultiN12Vlt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateN12Vlt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateOffChainMultiSigWallet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSingleN12Wlt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateUniSwapper",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniSwapperByInToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUniSwappers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVaults",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userLockers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userUniSwappers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userVaults",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userWallets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "generateERC20Locker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateMultiN12Vlt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateN12Vlt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateOffChainMultiSigWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSingleN12Wlt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateUniSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniSwapperByInToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUniSwappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLockers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUniSwappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userWallets",
    data: BytesLike
  ): Result;

  events: {};
}

export interface N12Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: N12FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    generateERC20Locker(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateMultiN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateOffChainMultiSigWallet(
      _threshold: PromiseOrValue<BigNumberish>,
      _owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateSingleN12Wlt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateUniSwapper(
      _router: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUniSwapperByInToken(
      user: PromiseOrValue<string>,
      inToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[N12Factory.UniSwapperInfoStructOutput]>;

    getUserUniSwappers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[N12Factory.UniSwapperInfoStructOutput[]]>;

    getUserVaults(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    userLockers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userUniSwappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        router: string;
        factory: string;
        inToken: string;
        outToken: string;
        swapperAddress: string;
      }
    >;

    userVaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userWallets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  generateERC20Locker(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateMultiN12Vlt(
    _mainAsset: PromiseOrValue<string>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateN12Vlt(
    _mainAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateOffChainMultiSigWallet(
    _threshold: PromiseOrValue<BigNumberish>,
    _owners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateSingleN12Wlt(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateUniSwapper(
    _router: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _inToken: PromiseOrValue<string>,
    _outToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUniSwapperByInToken(
    user: PromiseOrValue<string>,
    inToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<N12Factory.UniSwapperInfoStructOutput>;

  getUserUniSwappers(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<N12Factory.UniSwapperInfoStructOutput[]>;

  getUserVaults(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  userLockers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  userUniSwappers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      router: string;
      factory: string;
      inToken: string;
      outToken: string;
      swapperAddress: string;
    }
  >;

  userVaults(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  userWallets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    generateERC20Locker(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateMultiN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    generateN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateOffChainMultiSigWallet(
      _threshold: PromiseOrValue<BigNumberish>,
      _owners: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    generateSingleN12Wlt(overrides?: CallOverrides): Promise<string>;

    generateUniSwapper(
      _router: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUniSwapperByInToken(
      user: PromiseOrValue<string>,
      inToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<N12Factory.UniSwapperInfoStructOutput>;

    getUserUniSwappers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<N12Factory.UniSwapperInfoStructOutput[]>;

    getUserVaults(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    userLockers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    userUniSwappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        router: string;
        factory: string;
        inToken: string;
        outToken: string;
        swapperAddress: string;
      }
    >;

    userVaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    userWallets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    generateERC20Locker(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateMultiN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateOffChainMultiSigWallet(
      _threshold: PromiseOrValue<BigNumberish>,
      _owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateSingleN12Wlt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateUniSwapper(
      _router: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUniSwapperByInToken(
      user: PromiseOrValue<string>,
      inToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUniSwappers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVaults(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLockers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUniSwappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWallets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    generateERC20Locker(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateMultiN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateN12Vlt(
      _mainAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateOffChainMultiSigWallet(
      _threshold: PromiseOrValue<BigNumberish>,
      _owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateSingleN12Wlt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateUniSwapper(
      _router: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUniSwapperByInToken(
      user: PromiseOrValue<string>,
      inToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUniSwappers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVaults(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLockers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userUniSwappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWallets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
