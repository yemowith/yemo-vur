/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface YKitWalletFactoryInterface extends utils.Interface {
  functions: {
    "accountManager()": FunctionFragment;
    "deployAccountManager()": FunctionFragment;
    "deployRelayerManager(address)": FunctionFragment;
    "relayerManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountManager"
      | "deployAccountManager"
      | "deployRelayerManager"
      | "relayerManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployAccountManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployRelayerManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAccountManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployRelayerManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerManager",
    data: BytesLike
  ): Result;

  events: {
    "AccountManagerDeployed(address)": EventFragment;
    "RelayerManagerDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountManagerDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerManagerDeployed"): EventFragment;
}

export interface AccountManagerDeployedEventObject {
  accountManager: string;
}
export type AccountManagerDeployedEvent = TypedEvent<
  [string],
  AccountManagerDeployedEventObject
>;

export type AccountManagerDeployedEventFilter =
  TypedEventFilter<AccountManagerDeployedEvent>;

export interface RelayerManagerDeployedEventObject {
  relayerManager: string;
}
export type RelayerManagerDeployedEvent = TypedEvent<
  [string],
  RelayerManagerDeployedEventObject
>;

export type RelayerManagerDeployedEventFilter =
  TypedEventFilter<RelayerManagerDeployedEvent>;

export interface YKitWalletFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YKitWalletFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountManager(overrides?: CallOverrides): Promise<[string]>;

    deployAccountManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployRelayerManager(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relayerManager(overrides?: CallOverrides): Promise<[string]>;
  };

  accountManager(overrides?: CallOverrides): Promise<string>;

  deployAccountManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployRelayerManager(
    _accountManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relayerManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountManager(overrides?: CallOverrides): Promise<string>;

    deployAccountManager(overrides?: CallOverrides): Promise<string>;

    deployRelayerManager(
      _accountManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    relayerManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccountManagerDeployed(address)"(
      accountManager?: PromiseOrValue<string> | null
    ): AccountManagerDeployedEventFilter;
    AccountManagerDeployed(
      accountManager?: PromiseOrValue<string> | null
    ): AccountManagerDeployedEventFilter;

    "RelayerManagerDeployed(address)"(
      relayerManager?: PromiseOrValue<string> | null
    ): RelayerManagerDeployedEventFilter;
    RelayerManagerDeployed(
      relayerManager?: PromiseOrValue<string> | null
    ): RelayerManagerDeployedEventFilter;
  };

  estimateGas: {
    accountManager(overrides?: CallOverrides): Promise<BigNumber>;

    deployAccountManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployRelayerManager(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relayerManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployAccountManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployRelayerManager(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relayerManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
