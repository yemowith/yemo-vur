/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IYeSwapperFactoryInterface extends utils.Interface {
  functions: {
    "createSwapper(address,uint256)": FunctionFragment;
    "createTokenAndSetupSwap(string,string,uint8,address,address,uint256)": FunctionFragment;
    "createVault(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSwapper"
      | "createTokenAndSetupSwap"
      | "createVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSwapper",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenAndSetupSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenAndSetupSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;

  events: {
    "SwapperCreated(address)": EventFragment;
    "VaultCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapperCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export interface SwapperCreatedEventObject {
  swapperAddress: string;
}
export type SwapperCreatedEvent = TypedEvent<
  [string],
  SwapperCreatedEventObject
>;

export type SwapperCreatedEventFilter = TypedEventFilter<SwapperCreatedEvent>;

export interface VaultCreatedEventObject {
  vaultAddress: string;
}
export type VaultCreatedEvent = TypedEvent<[string], VaultCreatedEventObject>;

export type VaultCreatedEventFilter = TypedEventFilter<VaultCreatedEvent>;

export interface IYeSwapperFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IYeSwapperFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSwapper(
      _vault: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTokenAndSetupSwap(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVault(
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createSwapper(
    _vault: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTokenAndSetupSwap(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _underlying: PromiseOrValue<string>,
    _quoteToken: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVault(
    _baseToken: PromiseOrValue<string>,
    _quoteToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSwapper(
      _vault: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createTokenAndSetupSwap(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    createVault(
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "SwapperCreated(address)"(
      swapperAddress?: PromiseOrValue<string> | null
    ): SwapperCreatedEventFilter;
    SwapperCreated(
      swapperAddress?: PromiseOrValue<string> | null
    ): SwapperCreatedEventFilter;

    "VaultCreated(address)"(
      vaultAddress?: PromiseOrValue<string> | null
    ): VaultCreatedEventFilter;
    VaultCreated(
      vaultAddress?: PromiseOrValue<string> | null
    ): VaultCreatedEventFilter;
  };

  estimateGas: {
    createSwapper(
      _vault: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTokenAndSetupSwap(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVault(
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSwapper(
      _vault: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTokenAndSetupSwap(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVault(
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
