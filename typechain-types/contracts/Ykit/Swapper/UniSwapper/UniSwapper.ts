/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface UniSwapperInterface extends utils.Interface {
  functions: {
    "swapSingleHopExactAmountIn(uint256,uint256,uint24)": FunctionFragment;
    "swapSingleHopExactAmountOut(uint256,uint256,uint24)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "swapSingleHopExactAmountIn"
      | "swapSingleHopExactAmountOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swapSingleHopExactAmountIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSingleHopExactAmountOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapSingleHopExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSingleHopExactAmountOut",
    data: BytesLike
  ): Result;

  events: {
    "SwapExactAmountIn(address,uint256,uint256)": EventFragment;
    "SwapExactAmountOut(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapExactAmountIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapExactAmountOut"): EventFragment;
}

export interface SwapExactAmountInEventObject {
  user: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type SwapExactAmountInEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SwapExactAmountInEventObject
>;

export type SwapExactAmountInEventFilter =
  TypedEventFilter<SwapExactAmountInEvent>;

export interface SwapExactAmountOutEventObject {
  user: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type SwapExactAmountOutEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SwapExactAmountOutEventObject
>;

export type SwapExactAmountOutEventFilter =
  TypedEventFilter<SwapExactAmountOutEvent>;

export interface UniSwapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniSwapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swapSingleHopExactAmountIn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapSingleHopExactAmountOut(
      amountOutDesired: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  swapSingleHopExactAmountIn(
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapSingleHopExactAmountOut(
    amountOutDesired: PromiseOrValue<BigNumberish>,
    amountInMax: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swapSingleHopExactAmountIn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapSingleHopExactAmountOut(
      amountOutDesired: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SwapExactAmountIn(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): SwapExactAmountInEventFilter;
    SwapExactAmountIn(
      user?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): SwapExactAmountInEventFilter;

    "SwapExactAmountOut(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): SwapExactAmountOutEventFilter;
    SwapExactAmountOut(
      user?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): SwapExactAmountOutEventFilter;
  };

  estimateGas: {
    swapSingleHopExactAmountIn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapSingleHopExactAmountOut(
      amountOutDesired: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swapSingleHopExactAmountIn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapSingleHopExactAmountOut(
      amountOutDesired: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
