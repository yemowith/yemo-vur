/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ETHLockerInterface extends utils.Interface {
  functions: {
    "canWithdraw(uint256)": FunctionFragment;
    "configureDeposit(uint256,int256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "getETHPrice()": FunctionFragment;
    "increaseLockForDays(uint256,uint256)": FunctionFragment;
    "increaseMinExpectedPrice(int256,uint256)": FunctionFragment;
    "lockerPass()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canWithdraw"
      | "configureDeposit"
      | "deposit"
      | "deposits"
      | "getETHPrice"
      | "increaseLockForDays"
      | "increaseMinExpectedPrice"
      | "lockerPass"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureDeposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getETHPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockForDays",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMinExpectedPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockerPass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getETHPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockForDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMinExpectedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockerPass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "Withdrawal(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface DepositEventObject {
  by: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawalEventObject {
  by: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface ETHLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETHLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canWithdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    configureDeposit(
      _lockForDays: PromiseOrValue<BigNumberish>,
      _minExpectedPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lockForDays: BigNumber;
        createdAt: BigNumber;
        minExpectedPrice: BigNumber;
        balance: BigNumber;
      }
    >;

    getETHPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseLockForDays(
      _newLockForDays: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseMinExpectedPrice(
      _newMinExpectedPrice: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockerPass(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canWithdraw(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  configureDeposit(
    _lockForDays: PromiseOrValue<BigNumberish>,
    _minExpectedPrice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lockForDays: BigNumber;
      createdAt: BigNumber;
      minExpectedPrice: BigNumber;
      balance: BigNumber;
    }
  >;

  getETHPrice(overrides?: CallOverrides): Promise<BigNumber>;

  increaseLockForDays(
    _newLockForDays: PromiseOrValue<BigNumberish>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseMinExpectedPrice(
    _newMinExpectedPrice: PromiseOrValue<BigNumberish>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockerPass(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canWithdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    configureDeposit(
      _lockForDays: PromiseOrValue<BigNumberish>,
      _minExpectedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lockForDays: BigNumber;
        createdAt: BigNumber;
        minExpectedPrice: BigNumber;
        balance: BigNumber;
      }
    >;

    getETHPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLockForDays(
      _newLockForDays: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseMinExpectedPrice(
      _newMinExpectedPrice: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockerPass(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      by?: PromiseOrValue<string> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;
    Deposit(
      by?: PromiseOrValue<string> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;

    "Withdrawal(address,uint256,uint256)"(
      by?: PromiseOrValue<string> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalEventFilter;
    Withdrawal(
      by?: PromiseOrValue<string> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    canWithdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureDeposit(
      _lockForDays: PromiseOrValue<BigNumberish>,
      _minExpectedPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getETHPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLockForDays(
      _newLockForDays: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseMinExpectedPrice(
      _newMinExpectedPrice: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockerPass(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canWithdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configureDeposit(
      _lockForDays: PromiseOrValue<BigNumberish>,
      _minExpectedPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getETHPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLockForDays(
      _newLockForDays: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseMinExpectedPrice(
      _newMinExpectedPrice: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockerPass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
