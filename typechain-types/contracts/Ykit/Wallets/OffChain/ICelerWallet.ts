/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ICelerWalletInterface extends utils.Interface {
  functions: {
    "create(address[],address,bytes32)": FunctionFragment;
    "depositERC20(bytes32,address,uint256)": FunctionFragment;
    "depositETH(bytes32)": FunctionFragment;
    "drainToken(address,address,uint256)": FunctionFragment;
    "getBalance(bytes32,address)": FunctionFragment;
    "getOperator(bytes32)": FunctionFragment;
    "getProposalVote(bytes32,address)": FunctionFragment;
    "getProposedNewOperator(bytes32)": FunctionFragment;
    "getWalletOwners(bytes32)": FunctionFragment;
    "proposeNewOperator(bytes32,address)": FunctionFragment;
    "transferOperatorship(bytes32,address)": FunctionFragment;
    "transferToWallet(bytes32,bytes32,address,address,uint256)": FunctionFragment;
    "withdraw(bytes32,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "create"
      | "depositERC20"
      | "depositETH"
      | "drainToken"
      | "getBalance"
      | "getOperator"
      | "getProposalVote"
      | "getProposedNewOperator"
      | "getWalletOwners"
      | "proposeNewOperator"
      | "transferOperatorship"
      | "transferToWallet"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "drainToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperator",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVote",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedNewOperator",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletOwners",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOperator",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOperatorship",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToWallet",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drainToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedNewOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOperatorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ChangeOperator(bytes32,address,address)": EventFragment;
    "CreateWallet(bytes32,address[],address)": EventFragment;
    "DepositToWallet(bytes32,address,uint256)": EventFragment;
    "DrainToken(address,address,uint256)": EventFragment;
    "ProposeNewOperator(bytes32,address,address)": EventFragment;
    "TransferToWallet(bytes32,bytes32,address,address,uint256)": EventFragment;
    "WithdrawFromWallet(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositToWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrainToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeNewOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromWallet"): EventFragment;
}

export interface ChangeOperatorEventObject {
  walletId: string;
  oldOperator: string;
  newOperator: string;
}
export type ChangeOperatorEvent = TypedEvent<
  [string, string, string],
  ChangeOperatorEventObject
>;

export type ChangeOperatorEventFilter = TypedEventFilter<ChangeOperatorEvent>;

export interface CreateWalletEventObject {
  walletId: string;
  owners: string[];
  operator: string;
}
export type CreateWalletEvent = TypedEvent<
  [string, string[], string],
  CreateWalletEventObject
>;

export type CreateWalletEventFilter = TypedEventFilter<CreateWalletEvent>;

export interface DepositToWalletEventObject {
  walletId: string;
  tokenAddress: string;
  amount: BigNumber;
}
export type DepositToWalletEvent = TypedEvent<
  [string, string, BigNumber],
  DepositToWalletEventObject
>;

export type DepositToWalletEventFilter = TypedEventFilter<DepositToWalletEvent>;

export interface DrainTokenEventObject {
  tokenAddress: string;
  receiver: string;
  amount: BigNumber;
}
export type DrainTokenEvent = TypedEvent<
  [string, string, BigNumber],
  DrainTokenEventObject
>;

export type DrainTokenEventFilter = TypedEventFilter<DrainTokenEvent>;

export interface ProposeNewOperatorEventObject {
  walletId: string;
  newOperator: string;
  proposer: string;
}
export type ProposeNewOperatorEvent = TypedEvent<
  [string, string, string],
  ProposeNewOperatorEventObject
>;

export type ProposeNewOperatorEventFilter =
  TypedEventFilter<ProposeNewOperatorEvent>;

export interface TransferToWalletEventObject {
  fromWalletId: string;
  toWalletId: string;
  tokenAddress: string;
  receiver: string;
  amount: BigNumber;
}
export type TransferToWalletEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  TransferToWalletEventObject
>;

export type TransferToWalletEventFilter =
  TypedEventFilter<TransferToWalletEvent>;

export interface WithdrawFromWalletEventObject {
  walletId: string;
  tokenAddress: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawFromWalletEvent = TypedEvent<
  [string, string, string, BigNumber],
  WithdrawFromWalletEventObject
>;

export type WithdrawFromWalletEventFilter =
  TypedEventFilter<WithdrawFromWalletEvent>;

export interface ICelerWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICelerWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      _owners: PromiseOrValue<string>[],
      _operator: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drainToken(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposalVote(
      _walletId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getProposedNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWalletOwners(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    proposeNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOperatorship(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToWallet(
      _fromWalletId: PromiseOrValue<BytesLike>,
      _toWalletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  create(
    _owners: PromiseOrValue<string>[],
    _operator: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    _walletId: PromiseOrValue<BytesLike>,
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    _walletId: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drainToken(
    _tokenAddress: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    _walletId: PromiseOrValue<BytesLike>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOperator(
    _walletId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalVote(
    _walletId: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getProposedNewOperator(
    _walletId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWalletOwners(
    _walletId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  proposeNewOperator(
    _walletId: PromiseOrValue<BytesLike>,
    _newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOperatorship(
    _walletId: PromiseOrValue<BytesLike>,
    _newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToWallet(
    _fromWalletId: PromiseOrValue<BytesLike>,
    _toWalletId: PromiseOrValue<BytesLike>,
    _tokenAddress: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _walletId: PromiseOrValue<BytesLike>,
    _tokenAddress: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      _owners: PromiseOrValue<string>[],
      _operator: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    depositERC20(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    drainToken(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalVote(
      _walletId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProposedNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWalletOwners(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    proposeNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOperatorship(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToWallet(
      _fromWalletId: PromiseOrValue<BytesLike>,
      _toWalletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeOperator(bytes32,address,address)"(
      walletId?: PromiseOrValue<BytesLike> | null,
      oldOperator?: PromiseOrValue<string> | null,
      newOperator?: PromiseOrValue<string> | null
    ): ChangeOperatorEventFilter;
    ChangeOperator(
      walletId?: PromiseOrValue<BytesLike> | null,
      oldOperator?: PromiseOrValue<string> | null,
      newOperator?: PromiseOrValue<string> | null
    ): ChangeOperatorEventFilter;

    "CreateWallet(bytes32,address[],address)"(
      walletId?: PromiseOrValue<BytesLike> | null,
      owners?: PromiseOrValue<string>[] | null,
      operator?: PromiseOrValue<string> | null
    ): CreateWalletEventFilter;
    CreateWallet(
      walletId?: PromiseOrValue<BytesLike> | null,
      owners?: PromiseOrValue<string>[] | null,
      operator?: PromiseOrValue<string> | null
    ): CreateWalletEventFilter;

    "DepositToWallet(bytes32,address,uint256)"(
      walletId?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositToWalletEventFilter;
    DepositToWallet(
      walletId?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositToWalletEventFilter;

    "DrainToken(address,address,uint256)"(
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): DrainTokenEventFilter;
    DrainToken(
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): DrainTokenEventFilter;

    "ProposeNewOperator(bytes32,address,address)"(
      walletId?: PromiseOrValue<BytesLike> | null,
      newOperator?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null
    ): ProposeNewOperatorEventFilter;
    ProposeNewOperator(
      walletId?: PromiseOrValue<BytesLike> | null,
      newOperator?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null
    ): ProposeNewOperatorEventFilter;

    "TransferToWallet(bytes32,bytes32,address,address,uint256)"(
      fromWalletId?: PromiseOrValue<BytesLike> | null,
      toWalletId?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: null,
      amount?: null
    ): TransferToWalletEventFilter;
    TransferToWallet(
      fromWalletId?: PromiseOrValue<BytesLike> | null,
      toWalletId?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: null,
      amount?: null
    ): TransferToWalletEventFilter;

    "WithdrawFromWallet(bytes32,address,address,uint256)"(
      walletId?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawFromWalletEventFilter;
    WithdrawFromWallet(
      walletId?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawFromWalletEventFilter;
  };

  estimateGas: {
    create(
      _owners: PromiseOrValue<string>[],
      _operator: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositETH(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drainToken(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalVote(
      _walletId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWalletOwners(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOperatorship(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToWallet(
      _fromWalletId: PromiseOrValue<BytesLike>,
      _toWalletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _owners: PromiseOrValue<string>[],
      _operator: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drainToken(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalVote(
      _walletId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletOwners(
      _walletId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeNewOperator(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOperatorship(
      _walletId: PromiseOrValue<BytesLike>,
      _newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToWallet(
      _fromWalletId: PromiseOrValue<BytesLike>,
      _toWalletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _walletId: PromiseOrValue<BytesLike>,
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
