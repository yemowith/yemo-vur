/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface YSpaceInterface extends utils.Interface {
  functions: {
    "addressStore(string)": FunctionFragment;
    "call(address,bytes)": FunctionFragment;
    "callStatic(address,bytes)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "changeSalt(bytes32)": FunctionFragment;
    "changeSuperAdmin(address)": FunctionFragment;
    "decode(bytes,bytes32)": FunctionFragment;
    "deploy(uint256,bytes)": FunctionFragment;
    "deployAndSetProxy(string,address)": FunctionFragment;
    "deployProxy(address,string)": FunctionFragment;
    "encode(bytes,bytes32)": FunctionFragment;
    "execute(address,bytes)": FunctionFragment;
    "getAddress(uint256,bytes)": FunctionFragment;
    "getAddress(string)": FunctionFragment;
    "getData(string)": FunctionFragment;
    "getEncodedData(address,string,bytes)": FunctionFragment;
    "getEncodedData(string,bytes)": FunctionFragment;
    "getLastDeployed()": FunctionFragment;
    "getLastDeployedProxy()": FunctionFragment;
    "lastDeployedProxy()": FunctionFragment;
    "lastDeployedProxyPy()": FunctionFragment;
    "multiExecute(address[],bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "saveContractCode(bytes,string)": FunctionFragment;
    "setAddress(string,address)": FunctionFragment;
    "setData(string,bytes)": FunctionFragment;
    "superAdmin()": FunctionFragment;
    "validateEncodedData(bytes,bytes,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressStore"
      | "call"
      | "callStatic"
      | "changeOwner"
      | "changeSalt"
      | "changeSuperAdmin"
      | "decode"
      | "deploy"
      | "deployAndSetProxy"
      | "deployProxy"
      | "encode"
      | "execute"
      | "getAddress(uint256,bytes)"
      | "getAddress(string)"
      | "getData"
      | "getEncodedData(address,string,bytes)"
      | "getEncodedData(string,bytes)"
      | "getLastDeployed"
      | "getLastDeployedProxy"
      | "lastDeployedProxy"
      | "lastDeployedProxyPy"
      | "multiExecute"
      | "owner"
      | "saveContractCode"
      | "setAddress"
      | "setData"
      | "superAdmin"
      | "validateEncodedData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressStore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "callStatic",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSalt",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSuperAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAndSetProxy",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxy",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress(uint256,bytes)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncodedData(address,string,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncodedData(string,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDeployed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDeployedProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDeployedProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDeployedProxyPy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiExecute",
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saveContractCode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateEncodedData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callStatic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeSalt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAndSetProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddress(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddress(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEncodedData(address,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncodedData(string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDeployedProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDeployedProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDeployedProxyPy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveContractCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateEncodedData",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "SuperAdminChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperAdminChanged"): EventFragment;
}

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface SuperAdminChangedEventObject {
  oldSuperAdmin: string;
  newSuperAdmin: string;
}
export type SuperAdminChangedEvent = TypedEvent<
  [string, string],
  SuperAdminChangedEventObject
>;

export type SuperAdminChangedEventFilter =
  TypedEventFilter<SuperAdminChangedEvent>;

export interface YSpace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YSpaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    call(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSuperAdmin(
      newSuperAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      _s: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployAndSetProxy(
      savedContractName: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getAddress(uint256,bytes)"(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAddress(string)"(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getData(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEncodedData(address,string,bytes)"(
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "getEncodedData(string,bytes)"(
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastDeployed(overrides?: CallOverrides): Promise<[string]>;

    getLastDeployedProxy(overrides?: CallOverrides): Promise<[string]>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<[string]>;

    lastDeployedProxyPy(overrides?: CallOverrides): Promise<[string]>;

    multiExecute(
      targets: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    saveContractCode(
      code: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setData(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<[string]>;

    validateEncodedData(
      encodedData: PromiseOrValue<BytesLike>,
      originalData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addressStore(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  call(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  changeOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSalt(
    newSalt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSuperAdmin(
    newSuperAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decode(
    encodedData: PromiseOrValue<BytesLike>,
    additionalParam: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    _s: PromiseOrValue<BigNumberish>,
    _b: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployAndSetProxy(
    savedContractName: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployProxy(
    owner: PromiseOrValue<string>,
    proxyName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encode(
    data: PromiseOrValue<BytesLike>,
    additionalParam: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  execute(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getAddress(uint256,bytes)"(
    _salt: PromiseOrValue<BigNumberish>,
    bytecode: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAddress(string)"(
    _key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getData(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEncodedData(address,string,bytes)"(
    target: PromiseOrValue<string>,
    signature: PromiseOrValue<string>,
    params: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  "getEncodedData(string,bytes)"(
    signature: PromiseOrValue<string>,
    params: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastDeployed(overrides?: CallOverrides): Promise<string>;

  getLastDeployedProxy(overrides?: CallOverrides): Promise<string>;

  lastDeployedProxy(overrides?: CallOverrides): Promise<string>;

  lastDeployedProxyPy(overrides?: CallOverrides): Promise<string>;

  multiExecute(
    targets: PromiseOrValue<string>[],
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  saveContractCode(
    code: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    _key: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setData(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  superAdmin(overrides?: CallOverrides): Promise<string>;

  validateEncodedData(
    encodedData: PromiseOrValue<BytesLike>,
    originalData: PromiseOrValue<BytesLike>,
    additionalParam: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    call(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    callStatic(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSuperAdmin(
      newSuperAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      _s: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployAndSetProxy(
      savedContractName: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddress(uint256,bytes)"(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddress(string)"(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getData(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEncodedData(address,string,bytes)"(
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "getEncodedData(string,bytes)"(
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastDeployed(overrides?: CallOverrides): Promise<string>;

    getLastDeployedProxy(overrides?: CallOverrides): Promise<string>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<string>;

    lastDeployedProxyPy(overrides?: CallOverrides): Promise<string>;

    multiExecute(
      targets: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    saveContractCode(
      code: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setData(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    superAdmin(overrides?: CallOverrides): Promise<string>;

    validateEncodedData(
      encodedData: PromiseOrValue<BytesLike>,
      originalData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnerChanged(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerChangedEventFilter;
    OwnerChanged(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerChangedEventFilter;

    "SuperAdminChanged(address,address)"(
      oldSuperAdmin?: PromiseOrValue<string> | null,
      newSuperAdmin?: PromiseOrValue<string> | null
    ): SuperAdminChangedEventFilter;
    SuperAdminChanged(
      oldSuperAdmin?: PromiseOrValue<string> | null,
      newSuperAdmin?: PromiseOrValue<string> | null
    ): SuperAdminChangedEventFilter;
  };

  estimateGas: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    call(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callStatic(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSuperAdmin(
      newSuperAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      _s: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployAndSetProxy(
      savedContractName: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getAddress(uint256,bytes)"(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddress(string)"(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getData(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEncodedData(address,string,bytes)"(
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEncodedData(string,bytes)"(
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    getLastDeployedProxy(overrides?: CallOverrides): Promise<BigNumber>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<BigNumber>;

    lastDeployedProxyPy(overrides?: CallOverrides): Promise<BigNumber>;

    multiExecute(
      targets: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    saveContractCode(
      code: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setData(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    superAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    validateEncodedData(
      encodedData: PromiseOrValue<BytesLike>,
      originalData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    call(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callStatic(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSuperAdmin(
      newSuperAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      _s: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployAndSetProxy(
      savedContractName: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getAddress(uint256,bytes)"(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(string)"(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getData(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEncodedData(address,string,bytes)"(
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEncodedData(string,bytes)"(
      signature: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastDeployed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastDeployedProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDeployedProxyPy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiExecute(
      targets: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saveContractCode(
      code: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setData(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateEncodedData(
      encodedData: PromiseOrValue<BytesLike>,
      originalData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
