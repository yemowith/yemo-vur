/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface YSpaceInterface extends utils.Interface {
  functions: {
    "addressStore(string)": FunctionFragment;
    "changeSalt(bytes32)": FunctionFragment;
    "decode(bytes,bytes32)": FunctionFragment;
    "deploy(uint256,bytes)": FunctionFragment;
    "deployAndSetProxy(bytes,address,string)": FunctionFragment;
    "deployProxy(address,string)": FunctionFragment;
    "encode(bytes,bytes32)": FunctionFragment;
    "getAddress(string)": FunctionFragment;
    "getLastDeployedProxy()": FunctionFragment;
    "lastDeployedProxy()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddress(string,address)": FunctionFragment;
    "storeAddress(string,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressStore"
      | "changeSalt"
      | "decode"
      | "deploy"
      | "deployAndSetProxy"
      | "deployProxy"
      | "encode"
      | "getAddress"
      | "getLastDeployedProxy"
      | "lastDeployedProxy"
      | "owner"
      | "renounceOwnership"
      | "setAddress"
      | "storeAddress"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressStore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSalt",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAndSetProxy",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxy",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDeployedProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDeployedProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeSalt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAndSetProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastDeployedProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDeployedProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddressStored(string,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProxyDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressStored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyDeployed"): EventFragment;
}

export interface AddressStoredEventObject {
  key: string;
  storedAddress: string;
}
export type AddressStoredEvent = TypedEvent<
  [string, string],
  AddressStoredEventObject
>;

export type AddressStoredEventFilter = TypedEventFilter<AddressStoredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProxyDeployedEventObject {
  deployedProxy: string;
}
export type ProxyDeployedEvent = TypedEvent<[string], ProxyDeployedEventObject>;

export type ProxyDeployedEventFilter = TypedEventFilter<ProxyDeployedEvent>;

export interface YSpace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YSpaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployAndSetProxy(
      contractCode: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      savedContractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddress(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastDeployedProxy(overrides?: CallOverrides): Promise<[string]>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressStore(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  changeSalt(
    newSalt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decode(
    encodedData: PromiseOrValue<BytesLike>,
    additionalParam: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    _salt: PromiseOrValue<BigNumberish>,
    bytecode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployAndSetProxy(
    contractCode: PromiseOrValue<BytesLike>,
    newOwner: PromiseOrValue<string>,
    savedContractName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployProxy(
    owner: PromiseOrValue<string>,
    proxyName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encode(
    data: PromiseOrValue<BytesLike>,
    additionalParam: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddress(
    _key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastDeployedProxy(overrides?: CallOverrides): Promise<string>;

  lastDeployedProxy(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    _key: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeAddress(
    _key: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployAndSetProxy(
      contractCode: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      savedContractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddress(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastDeployedProxy(overrides?: CallOverrides): Promise<string>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    storeAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressStored(string,address)"(
      key?: null,
      storedAddress?: null
    ): AddressStoredEventFilter;
    AddressStored(key?: null, storedAddress?: null): AddressStoredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProxyDeployed(address)"(deployedProxy?: null): ProxyDeployedEventFilter;
    ProxyDeployed(deployedProxy?: null): ProxyDeployedEventFilter;
  };

  estimateGas: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployAndSetProxy(
      contractCode: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      savedContractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddress(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastDeployedProxy(overrides?: CallOverrides): Promise<BigNumber>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressStore(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeSalt(
      newSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decode(
      encodedData: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      _salt: PromiseOrValue<BigNumberish>,
      bytecode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployAndSetProxy(
      contractCode: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      savedContractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployProxy(
      owner: PromiseOrValue<string>,
      proxyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encode(
      data: PromiseOrValue<BytesLike>,
      additionalParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddress(
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastDeployedProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDeployedProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeAddress(
      _key: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
