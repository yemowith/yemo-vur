/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface YSetupInterface extends utils.Interface {
  functions: {
    "_dplr()": FunctionFragment;
    "_makeEEMT()": FunctionFragment;
    "_p()": FunctionFragment;
    "ddsp()": FunctionFragment;
    "dplr()": FunctionFragment;
    "eemt()": FunctionFragment;
    "gA()": FunctionFragment;
    "stp()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_dplr"
      | "_makeEEMT"
      | "_p"
      | "ddsp"
      | "dplr"
      | "eemt"
      | "gA"
      | "stp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_dplr", values?: undefined): string;
  encodeFunctionData(functionFragment: "_makeEEMT", values?: undefined): string;
  encodeFunctionData(functionFragment: "_p", values?: undefined): string;
  encodeFunctionData(functionFragment: "ddsp", values?: undefined): string;
  encodeFunctionData(functionFragment: "dplr", values?: undefined): string;
  encodeFunctionData(functionFragment: "eemt", values?: undefined): string;
  encodeFunctionData(functionFragment: "gA", values?: undefined): string;
  encodeFunctionData(functionFragment: "stp", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_dplr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_makeEEMT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_p", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ddsp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dplr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eemt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stp", data: BytesLike): Result;

  events: {};
}

export interface YSetup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YSetupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _dplr(overrides?: CallOverrides): Promise<[string]>;

    _makeEEMT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _p(overrides?: CallOverrides): Promise<[string]>;

    ddsp(overrides?: CallOverrides): Promise<[string]>;

    dplr(overrides?: CallOverrides): Promise<[string]>;

    eemt(overrides?: CallOverrides): Promise<[string]>;

    gA(overrides?: CallOverrides): Promise<[string, string, string]>;

    stp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _dplr(overrides?: CallOverrides): Promise<string>;

  _makeEEMT(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _p(overrides?: CallOverrides): Promise<string>;

  ddsp(overrides?: CallOverrides): Promise<string>;

  dplr(overrides?: CallOverrides): Promise<string>;

  eemt(overrides?: CallOverrides): Promise<string>;

  gA(overrides?: CallOverrides): Promise<[string, string, string]>;

  stp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _dplr(overrides?: CallOverrides): Promise<string>;

    _makeEEMT(overrides?: CallOverrides): Promise<string>;

    _p(overrides?: CallOverrides): Promise<string>;

    ddsp(overrides?: CallOverrides): Promise<string>;

    dplr(overrides?: CallOverrides): Promise<string>;

    eemt(overrides?: CallOverrides): Promise<string>;

    gA(overrides?: CallOverrides): Promise<[string, string, string]>;

    stp(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    _dplr(overrides?: CallOverrides): Promise<BigNumber>;

    _makeEEMT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _p(overrides?: CallOverrides): Promise<BigNumber>;

    ddsp(overrides?: CallOverrides): Promise<BigNumber>;

    dplr(overrides?: CallOverrides): Promise<BigNumber>;

    eemt(overrides?: CallOverrides): Promise<BigNumber>;

    gA(overrides?: CallOverrides): Promise<BigNumber>;

    stp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _dplr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _makeEEMT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _p(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ddsp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dplr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eemt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
