/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace YemoVur {
  export type SBOMBAStruct = {
    pyA: PromiseOrValue<string>;
    bombaA: PromiseOrValue<string>;
  };

  export type SBOMBAStructOutput = [string, string] & {
    pyA: string;
    bombaA: string;
  };
}

export interface YemoVurInterface extends utils.Interface {
  functions: {
    "ddsp()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "dplr()": FunctionFragment;
    "eemt()": FunctionFragment;
    "vur()": FunctionFragment;
    "vurR()": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ddsp"
      | "deposit"
      | "dplr"
      | "eemt"
      | "vur"
      | "vurR"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ddsp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dplr", values?: undefined): string;
  encodeFunctionData(functionFragment: "eemt", values?: undefined): string;
  encodeFunctionData(functionFragment: "vur", values?: undefined): string;
  encodeFunctionData(functionFragment: "vurR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ddsp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dplr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eemt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vurR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Act(string,uint256,string)": EventFragment;
    "Inf(string,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Act"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Inf"): EventFragment;
}

export interface ActEventObject {
  name: string;
  value: BigNumber;
  desc: string;
}
export type ActEvent = TypedEvent<[string, BigNumber, string], ActEventObject>;

export type ActEventFilter = TypedEventFilter<ActEvent>;

export interface InfEventObject {
  name: string;
  value: BigNumber;
  desc: string;
}
export type InfEvent = TypedEvent<[string, BigNumber, string], InfEventObject>;

export type InfEventFilter = TypedEventFilter<InfEvent>;

export interface YemoVur extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YemoVurInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ddsp(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dplr(overrides?: CallOverrides): Promise<[string]>;

    eemt(overrides?: CallOverrides): Promise<[string]>;

    vur(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vurR(overrides?: CallOverrides): Promise<[YemoVur.SBOMBAStructOutput]>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ddsp(overrides?: CallOverrides): Promise<string>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dplr(overrides?: CallOverrides): Promise<string>;

  eemt(overrides?: CallOverrides): Promise<string>;

  vur(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vurR(overrides?: CallOverrides): Promise<YemoVur.SBOMBAStructOutput>;

  withdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ddsp(overrides?: CallOverrides): Promise<string>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dplr(overrides?: CallOverrides): Promise<string>;

    eemt(overrides?: CallOverrides): Promise<string>;

    vur(overrides?: CallOverrides): Promise<boolean>;

    vurR(overrides?: CallOverrides): Promise<YemoVur.SBOMBAStructOutput>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Act(string,uint256,string)"(
      name?: null,
      value?: null,
      desc?: null
    ): ActEventFilter;
    Act(name?: null, value?: null, desc?: null): ActEventFilter;

    "Inf(string,uint256,string)"(
      name?: null,
      value?: null,
      desc?: null
    ): InfEventFilter;
    Inf(name?: null, value?: null, desc?: null): InfEventFilter;
  };

  estimateGas: {
    ddsp(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dplr(overrides?: CallOverrides): Promise<BigNumber>;

    eemt(overrides?: CallOverrides): Promise<BigNumber>;

    vur(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vurR(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ddsp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dplr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eemt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vur(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vurR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
